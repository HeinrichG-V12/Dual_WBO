
TS_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800200  00000c64  00000d18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c64  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017f  0080023c  0080023c  00000d54  2**0
                  ALLOC
  3 .eeprom       000000ac  00810000  00810000  00000d54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000140  00000000  00000000  00000e70  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b83  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000fa4  00000000  00000000  00002b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bf3  00000000  00000000  00003ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000264  00000000  00000000  000046cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000093a  00000000  00000000  00004930  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000704  00000000  00000000  0000526a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b8  00000000  00000000  0000596e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	88 c0       	rjmp	.+272    	; 0x112 <__ctors_end>
   2:	00 00       	nop
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
   6:	00 00       	nop
   8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
   e:	00 00       	nop
  10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
  12:	00 00       	nop
  14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
  16:	00 00       	nop
  18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
  1e:	00 00       	nop
  20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
  22:	00 00       	nop
  24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
  26:	00 00       	nop
  28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	91 c0       	rjmp	.+290    	; 0x150 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8f c0       	rjmp	.+286    	; 0x150 <__bad_interrupt>
  32:	00 00       	nop
  34:	8d c0       	rjmp	.+282    	; 0x150 <__bad_interrupt>
  36:	00 00       	nop
  38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
  42:	00 00       	nop
  44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
  46:	00 00       	nop
  48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
  4e:	00 00       	nop
  50:	c6 c0       	rjmp	.+396    	; 0x1de <__vector_20>
  52:	00 00       	nop
  54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
  56:	00 00       	nop
  58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
  5e:	00 00       	nop
  60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
  66:	00 00       	nop
  68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
  72:	00 00       	nop
  74:	6d c0       	rjmp	.+218    	; 0x150 <__bad_interrupt>
  76:	00 00       	nop
  78:	6b c0       	rjmp	.+214    	; 0x150 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	69 c0       	rjmp	.+210    	; 0x150 <__bad_interrupt>
  7e:	00 00       	nop
  80:	67 c0       	rjmp	.+206    	; 0x150 <__bad_interrupt>
  82:	00 00       	nop
  84:	65 c0       	rjmp	.+202    	; 0x150 <__bad_interrupt>
  86:	00 00       	nop
  88:	63 c0       	rjmp	.+198    	; 0x150 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	61 c0       	rjmp	.+194    	; 0x150 <__bad_interrupt>
  8e:	00 00       	nop
  90:	5f c0       	rjmp	.+190    	; 0x150 <__bad_interrupt>
  92:	00 00       	nop
  94:	5d c0       	rjmp	.+186    	; 0x150 <__bad_interrupt>
  96:	00 00       	nop
  98:	5b c0       	rjmp	.+182    	; 0x150 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	59 c0       	rjmp	.+178    	; 0x150 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	57 c0       	rjmp	.+174    	; 0x150 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	55 c0       	rjmp	.+170    	; 0x150 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	53 c0       	rjmp	.+166    	; 0x150 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	51 c0       	rjmp	.+162    	; 0x150 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	4f c0       	rjmp	.+158    	; 0x150 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	4d c0       	rjmp	.+154    	; 0x150 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	4b c0       	rjmp	.+150    	; 0x150 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	49 c0       	rjmp	.+146    	; 0x150 <__bad_interrupt>
  be:	00 00       	nop
  c0:	47 c0       	rjmp	.+142    	; 0x150 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	45 c0       	rjmp	.+138    	; 0x150 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	43 c0       	rjmp	.+134    	; 0x150 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bc c0       	rjmp	.+376    	; 0x246 <__vector_51>
  ce:	00 00       	nop
  d0:	3f c0       	rjmp	.+126    	; 0x150 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	3d c0       	rjmp	.+122    	; 0x150 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	3b c0       	rjmp	.+118    	; 0x150 <__bad_interrupt>
  da:	00 00       	nop
  dc:	39 c0       	rjmp	.+114    	; 0x150 <__bad_interrupt>
  de:	00 00       	nop
  e0:	37 c0       	rjmp	.+110    	; 0x150 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	d5 02       	muls	r29, r21
  e6:	31 03       	mulsu	r19, r17
  e8:	3e 03       	fmul	r19, r22
  ea:	3e 03       	fmul	r19, r22
  ec:	1c 03       	fmul	r17, r20
  ee:	ad 02       	muls	r26, r29
  f0:	3e 03       	fmul	r19, r22
  f2:	3e 03       	fmul	r19, r22
  f4:	3e 03       	fmul	r19, r22
  f6:	3e 03       	fmul	r19, r22
  f8:	3e 03       	fmul	r19, r22
  fa:	3e 03       	fmul	r19, r22
  fc:	3e 03       	fmul	r19, r22
  fe:	3e 03       	fmul	r19, r22
 100:	3e 03       	fmul	r19, r22
 102:	39 03       	fmul	r19, r17
 104:	b3 02       	muls	r27, r19
 106:	3e 03       	fmul	r19, r22
 108:	b9 02       	muls	r27, r25
 10a:	3e 03       	fmul	r19, r22
 10c:	3e 03       	fmul	r19, r22
 10e:	bf 02       	muls	r27, r31
 110:	0d 03       	fmul	r16, r21

00000112 <__ctors_end>:
 112:	11 24       	eor	r1, r1
 114:	1f be       	out	0x3f, r1	; 63
 116:	cf ef       	ldi	r28, 0xFF	; 255
 118:	d1 e2       	ldi	r29, 0x21	; 33
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	cd bf       	out	0x3d, r28	; 61
 11e:	00 e0       	ldi	r16, 0x00	; 0
 120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
 122:	12 e0       	ldi	r17, 0x02	; 2
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b2 e0       	ldi	r27, 0x02	; 2
 128:	e4 e6       	ldi	r30, 0x64	; 100
 12a:	fc e0       	ldi	r31, 0x0C	; 12
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	ac 33       	cpi	r26, 0x3C	; 60
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	23 e0       	ldi	r18, 0x03	; 3
 13e:	ac e3       	ldi	r26, 0x3C	; 60
 140:	b2 e0       	ldi	r27, 0x02	; 2
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	ab 3b       	cpi	r26, 0xBB	; 187
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	a2 d1       	rcall	.+836    	; 0x492 <main>
 14e:	88 c5       	rjmp	.+2832   	; 0xc60 <_exit>

00000150 <__bad_interrupt>:
 150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <adc_init>:

#include "adc.h"

void adc_init (void)
{
	ADMUX = (1 << REFS0);		// AVCC with external cap on aref pin
 152:	80 e4       	ldi	r24, 0x40	; 64
 154:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRA = (1 << ADEN)|(1 << ADPS0)|(1 << ADPS1)|(1 << ADPS2); // adc enable, prescaler 128
 158:	87 e8       	ldi	r24, 0x87	; 135
 15a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 15e:	08 95       	ret

00000160 <adc_read>:
}

uint16_t adc_read (uint8_t channel)
{
	ADMUX |= (ADMUX & ~(0x1F)) | (channel & 0x1F);
 160:	ec e7       	ldi	r30, 0x7C	; 124
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	20 81       	ld	r18, Z
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	20 7e       	andi	r18, 0xE0	; 224
 16a:	8f 71       	andi	r24, 0x1F	; 31
 16c:	28 2b       	or	r18, r24
 16e:	80 81       	ld	r24, Z
 170:	28 2b       	or	r18, r24
 172:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	80 64       	ori	r24, 0x40	; 64
 17c:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) );
 17e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 182:	86 fd       	sbrc	r24, 6
 184:	fc cf       	rjmp	.-8      	; 0x17e <adc_read+0x1e>
	return ADCW;
 186:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 18a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
}
 18e:	08 95       	ret

00000190 <adc_read_avg>:

uint16_t adc_read_avg (uint8_t channel, uint8_t samples)
{
 190:	cf 92       	push	r12
 192:	df 92       	push	r13
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	18 2f       	mov	r17, r24
 1a0:	d6 2f       	mov	r29, r22
	uint32_t buf = 0;
	
	for (uint8_t i = 0; i < samples; i++)
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
	return ADCW;
}

uint16_t adc_read_avg (uint8_t channel, uint8_t samples)
{
	uint32_t buf = 0;
 1a4:	c1 2c       	mov	r12, r1
 1a6:	d1 2c       	mov	r13, r1
 1a8:	76 01       	movw	r14, r12
	
	for (uint8_t i = 0; i < samples; i++)
 1aa:	07 c0       	rjmp	.+14     	; 0x1ba <adc_read_avg+0x2a>
	{
		buf += adc_read(channel);
 1ac:	81 2f       	mov	r24, r17
 1ae:	d8 df       	rcall	.-80     	; 0x160 <adc_read>
 1b0:	c8 0e       	add	r12, r24
 1b2:	d9 1e       	adc	r13, r25
 1b4:	e1 1c       	adc	r14, r1
 1b6:	f1 1c       	adc	r15, r1

uint16_t adc_read_avg (uint8_t channel, uint8_t samples)
{
	uint32_t buf = 0;
	
	for (uint8_t i = 0; i < samples; i++)
 1b8:	cf 5f       	subi	r28, 0xFF	; 255
 1ba:	cd 17       	cp	r28, r29
 1bc:	b8 f3       	brcs	.-18     	; 0x1ac <adc_read_avg+0x1c>
	{
		buf += adc_read(channel);
	}
	return (uint16_t) (buf / samples);
 1be:	2d 2f       	mov	r18, r29
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	c7 01       	movw	r24, r14
 1c8:	b6 01       	movw	r22, r12
 1ca:	e0 d4       	rcall	.+2496   	; 0xb8c <__udivmodsi4>
 1cc:	c9 01       	movw	r24, r18
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	ff 90       	pop	r15
 1d6:	ef 90       	pop	r14
 1d8:	df 90       	pop	r13
 1da:	cf 90       	pop	r12
 1dc:	08 95       	ret

000001de <__vector_20>:
tSensor sensor1;

#define SENSOR_SHUNT	61.9

ISR (TIMER1_OVF_vect)    // Timer1 ISR
{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	0b b6       	in	r0, 0x3b	; 59
 1ea:	0f 92       	push	r0
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	//PORTB ^= (1 << PB7);	// pb7 ist high

	liveData[0]++;
 1f4:	e4 ea       	ldi	r30, 0xA4	; 164
 1f6:	f2 e0       	ldi	r31, 0x02	; 2
 1f8:	80 81       	ld	r24, Z
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	80 83       	st	Z, r24
	PORTB ^= (1 << PB7);
 1fe:	85 b1       	in	r24, 0x05	; 5
 200:	80 58       	subi	r24, 0x80	; 128
 202:	85 b9       	out	0x05, r24	; 5
	
	liveData[30] = low(mainLoopsPerSecond);
 204:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <mainLoopsPerSecond>
 208:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <mainLoopsPerSecond+0x1>
 20c:	86 8f       	std	Z+30, r24	; 0x1e
	liveData[31] = high(mainLoopsPerSecond);
 20e:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <mainLoopsPerSecond>
 212:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <mainLoopsPerSecond+0x1>
 216:	97 8f       	std	Z+31, r25	; 0x1f
	
	mainLoopsPerSecond = 0;
 218:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <mainLoopsPerSecond+0x1>
 21c:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <mainLoopsPerSecond>
	
	TCNT1 = tcnt1_preload;   // for 1 sec at 16 MHz
 220:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <tcnt1_preload>
 224:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <tcnt1_preload+0x1>
 228:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 22c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
}
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	0f 90       	pop	r0
 23a:	0b be       	out	0x3b, r0	; 59
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <__vector_51>:


ISR(USART2_RX_vect)
{
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	0b b6       	in	r0, 0x3b	; 59
 252:	0f 92       	push	r0
 254:	2f 93       	push	r18
 256:	3f 93       	push	r19
 258:	4f 93       	push	r20
 25a:	5f 93       	push	r21
 25c:	6f 93       	push	r22
 25e:	7f 93       	push	r23
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
	uint8_t data;
	
	data = UDR2;
 26c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
	
	switch (data)
 270:	86 34       	cpi	r24, 0x46	; 70
 272:	69 f0       	breq	.+26     	; 0x28e <__vector_51+0x48>
 274:	18 f4       	brcc	.+6      	; 0x27c <__vector_51+0x36>
 276:	81 34       	cpi	r24, 0x41	; 65
 278:	31 f0       	breq	.+12     	; 0x286 <__vector_51+0x40>
 27a:	24 c0       	rjmp	.+72     	; 0x2c4 <__vector_51+0x7e>
 27c:	8c 34       	cpi	r24, 0x4C	; 76
 27e:	99 f0       	breq	.+38     	; 0x2a6 <__vector_51+0x60>
 280:	86 35       	cpi	r24, 0x56	; 86
 282:	59 f0       	breq	.+22     	; 0x29a <__vector_51+0x54>
 284:	1f c0       	rjmp	.+62     	; 0x2c4 <__vector_51+0x7e>
	{
		case 'A':
		PORTB ^= (1 << PB7);	// pb7 ist high
 286:	85 b1       	in	r24, 0x05	; 5
 288:	80 58       	subi	r24, 0x80	; 128
 28a:	85 b9       	out	0x05, r24	; 5
		break;
 28c:	1b c0       	rjmp	.+54     	; 0x2c4 <__vector_51+0x7e>
		case 'F':
		uart2_sendS((uint8_t*) string, sizeof(string)-1);
 28e:	68 e2       	ldi	r22, 0x28	; 40
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	92 e0       	ldi	r25, 0x02	; 2
 296:	70 d2       	rcall	.+1248   	; 0x778 <uart2_sendS>
		break;
 298:	15 c0       	rjmp	.+42     	; 0x2c4 <__vector_51+0x7e>
		
		case 'V':	// reading controller settings
		uart2_sendS((uint8_t*) controllerSettings, sizeof(controllerSettings));
 29a:	69 e0       	ldi	r22, 0x09	; 9
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	82 e6       	ldi	r24, 0x62	; 98
 2a0:	93 e0       	ldi	r25, 0x03	; 3
 2a2:	6a d2       	rcall	.+1236   	; 0x778 <uart2_sendS>
		break;
 2a4:	0f c0       	rjmp	.+30     	; 0x2c4 <__vector_51+0x7e>
		
		
		case 'L':
		tmp = adc_value;
 2a6:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__data_end>
 2aa:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <__data_end+0x1>
 2ae:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <tmp+0x1>
 2b2:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <tmp>
		
		// sensor1.Ip = ((sensor1.Ua-sensor1.Ua_cal)/(619*8))*1000;
		
		uart2_sendS((uint8_t*) adc_value, sizeof(adc_value));
 2b6:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__data_end>
 2ba:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <__data_end+0x1>
 2be:	62 e0       	ldi	r22, 0x02	; 2
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	5a d2       	rcall	.+1204   	; 0x778 <uart2_sendS>
		break;
	}
}
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	bf 91       	pop	r27
 2ca:	af 91       	pop	r26
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	7f 91       	pop	r23
 2d2:	6f 91       	pop	r22
 2d4:	5f 91       	pop	r21
 2d6:	4f 91       	pop	r20
 2d8:	3f 91       	pop	r19
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0b be       	out	0x3b, r0	; 59
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <calculate_pump_current>:
    }
}

int16_t calculate_pump_current (uint16_t Ua, uint16_t Ua_cal)
{	
	return (((int16_t)Ua - (int16_t)Ua_cal) / (SENSOR_SHUNT * 8) * 1000);
 2ea:	86 1b       	sub	r24, r22
 2ec:	97 0b       	sbc	r25, r23
 2ee:	bc 01       	movw	r22, r24
 2f0:	99 0f       	add	r25, r25
 2f2:	88 0b       	sbc	r24, r24
 2f4:	99 0b       	sbc	r25, r25
 2f6:	5b d3       	rcall	.+1718   	; 0x9ae <__floatsisf>
 2f8:	2a e9       	ldi	r18, 0x9A	; 154
 2fa:	39 e9       	ldi	r19, 0x99	; 153
 2fc:	47 ef       	ldi	r20, 0xF7	; 247
 2fe:	53 e4       	ldi	r21, 0x43	; 67
 300:	bb d2       	rcall	.+1398   	; 0x878 <__divsf3>
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	4a e7       	ldi	r20, 0x7A	; 122
 308:	54 e4       	ldi	r21, 0x44	; 68
 30a:	dd d3       	rcall	.+1978   	; 0xac6 <__mulsf3>
 30c:	1d d3       	rcall	.+1594   	; 0x948 <__fixsfsi>
}
 30e:	cb 01       	movw	r24, r22
 310:	08 95       	ret

00000312 <interpolate>:

uint16_t interpolate (int16_t ip)
{
 312:	4f 92       	push	r4
 314:	5f 92       	push	r5
 316:	6f 92       	push	r6
 318:	7f 92       	push	r7
 31a:	bf 92       	push	r11
 31c:	cf 92       	push	r12
 31e:	df 92       	push	r13
 320:	ef 92       	push	r14
 322:	ff 92       	push	r15
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	00 d0       	rcall	.+0      	; 0x32e <interpolate+0x1c>
 32e:	1f 92       	push	r1
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	8c 01       	movw	r16, r24
	uint8_t counter = 0;
	
	float gain, offset;
	
	// check against the both ends
	if (ip <= ip_values[0]) 
 336:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <ip_values>
 33a:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <ip_values+0x1>
 33e:	80 17       	cp	r24, r16
 340:	91 07       	cpc	r25, r17
 342:	2c f0       	brlt	.+10     	; 0x34e <interpolate+0x3c>
	{
		y = lambda_values[0];
 344:	60 91 e4 02 	lds	r22, 0x02E4	; 0x8002e4 <lambda_values>
 348:	70 91 e5 02 	lds	r23, 0x02E5	; 0x8002e5 <lambda_values+0x1>
 34c:	02 c0       	rjmp	.+4      	; 0x352 <interpolate+0x40>
	return (((int16_t)Ua - (int16_t)Ua_cal) / (SENSOR_SHUNT * 8) * 1000);
}

uint16_t interpolate (int16_t ip)
{
	uint16_t y = 0;
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	70 e0       	ldi	r23, 0x00	; 0
	if (ip <= ip_values[0]) 
	{
		y = lambda_values[0];
	}
	
	if (ip >= ip_values[23])
 352:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <ip_values+0x2e>
 356:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <ip_values+0x2f>
 35a:	08 17       	cp	r16, r24
 35c:	19 07       	cpc	r17, r25
 35e:	24 f0       	brlt	.+8      	; 0x368 <interpolate+0x56>
	{
		y = lambda_values[23];
 360:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <lambda_values+0x2e>
 364:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <lambda_values+0x2f>
	return (((int16_t)Ua - (int16_t)Ua_cal) / (SENSOR_SHUNT * 8) * 1000);
}

uint16_t interpolate (int16_t ip)
{
	uint16_t y = 0;
 368:	b1 2c       	mov	r11, r1
 36a:	79 c0       	rjmp	.+242    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	
	while ((y == 0) && (counter < 23))
	{
		// exists an exact value?
		if ( ip_values[counter] == ip)
 36c:	2b 2d       	mov	r18, r11
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	f9 01       	movw	r30, r18
 372:	ee 0f       	add	r30, r30
 374:	ff 1f       	adc	r31, r31
 376:	ee 5b       	subi	r30, 0xBE	; 190
 378:	fd 4f       	sbci	r31, 0xFD	; 253
 37a:	80 81       	ld	r24, Z
 37c:	91 81       	ldd	r25, Z+1	; 0x01
 37e:	9a 83       	std	Y+2, r25	; 0x02
 380:	89 83       	std	Y+1, r24	; 0x01
 382:	08 17       	cp	r16, r24
 384:	19 07       	cpc	r17, r25
 386:	41 f4       	brne	.+16     	; 0x398 <interpolate+0x86>
		{
			y = lambda_values[counter];
 388:	22 0f       	add	r18, r18
 38a:	33 1f       	adc	r19, r19
 38c:	f9 01       	movw	r30, r18
 38e:	ec 51       	subi	r30, 0x1C	; 28
 390:	fd 4f       	sbci	r31, 0xFD	; 253
 392:	60 81       	ld	r22, Z
 394:	71 81       	ldd	r23, Z+1	; 0x01
 396:	62 c0       	rjmp	.+196    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		}
		
		// ip value is between two values
		else if ((ip_values[counter] <= ip) && (ip <= ip_values[counter + 1]))
 398:	89 81       	ldd	r24, Y+1	; 0x01
 39a:	9a 81       	ldd	r25, Y+2	; 0x02
 39c:	08 17       	cp	r16, r24
 39e:	19 07       	cpc	r17, r25
 3a0:	0c f4       	brge	.+2      	; 0x3a4 <interpolate+0x92>
 3a2:	5c c0       	rjmp	.+184    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 3a4:	c9 01       	movw	r24, r18
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	fc 01       	movw	r30, r24
 3aa:	ee 0f       	add	r30, r30
 3ac:	ff 1f       	adc	r31, r31
 3ae:	ee 5b       	subi	r30, 0xBE	; 190
 3b0:	fd 4f       	sbci	r31, 0xFD	; 253
 3b2:	e0 80       	ld	r14, Z
 3b4:	f1 80       	ldd	r15, Z+1	; 0x01
 3b6:	e0 16       	cp	r14, r16
 3b8:	f1 06       	cpc	r15, r17
 3ba:	0c f4       	brge	.+2      	; 0x3be <interpolate+0xac>
 3bc:	4f c0       	rjmp	.+158    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		{
			gain = (float) (lambda_values[counter+1] - lambda_values[counter]) / (ip_values[counter + 1] -  ip_values[counter]);
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	fc 01       	movw	r30, r24
 3c4:	ec 51       	subi	r30, 0x1C	; 28
 3c6:	fd 4f       	sbci	r31, 0xFD	; 253
 3c8:	c0 80       	ld	r12, Z
 3ca:	d1 80       	ldd	r13, Z+1	; 0x01
 3cc:	22 0f       	add	r18, r18
 3ce:	33 1f       	adc	r19, r19
 3d0:	f9 01       	movw	r30, r18
 3d2:	ec 51       	subi	r30, 0x1C	; 28
 3d4:	fd 4f       	sbci	r31, 0xFD	; 253
 3d6:	80 81       	ld	r24, Z
 3d8:	91 81       	ldd	r25, Z+1	; 0x01
 3da:	b6 01       	movw	r22, r12
 3dc:	68 1b       	sub	r22, r24
 3de:	79 0b       	sbc	r23, r25
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	e2 d2       	rcall	.+1476   	; 0x9aa <__floatunsisf>
 3e6:	2b 01       	movw	r4, r22
 3e8:	3c 01       	movw	r6, r24
 3ea:	b7 01       	movw	r22, r14
 3ec:	89 81       	ldd	r24, Y+1	; 0x01
 3ee:	9a 81       	ldd	r25, Y+2	; 0x02
 3f0:	68 1b       	sub	r22, r24
 3f2:	79 0b       	sbc	r23, r25
 3f4:	07 2e       	mov	r0, r23
 3f6:	00 0c       	add	r0, r0
 3f8:	88 0b       	sbc	r24, r24
 3fa:	99 0b       	sbc	r25, r25
 3fc:	d8 d2       	rcall	.+1456   	; 0x9ae <__floatsisf>
 3fe:	9b 01       	movw	r18, r22
 400:	ac 01       	movw	r20, r24
 402:	c3 01       	movw	r24, r6
 404:	b2 01       	movw	r22, r4
 406:	38 d2       	rcall	.+1136   	; 0x878 <__divsf3>
 408:	2b 01       	movw	r4, r22
 40a:	3c 01       	movw	r6, r24
			
			offset = (lambda_values[counter+1] - (ip_values[counter + 1] * gain));
 40c:	b6 01       	movw	r22, r12
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	cb d2       	rcall	.+1430   	; 0x9aa <__floatunsisf>
 414:	69 83       	std	Y+1, r22	; 0x01
 416:	7a 83       	std	Y+2, r23	; 0x02
 418:	8b 83       	std	Y+3, r24	; 0x03
 41a:	9c 83       	std	Y+4, r25	; 0x04
 41c:	b7 01       	movw	r22, r14
 41e:	ff 0c       	add	r15, r15
 420:	88 0b       	sbc	r24, r24
 422:	99 0b       	sbc	r25, r25
 424:	c4 d2       	rcall	.+1416   	; 0x9ae <__floatsisf>
 426:	a3 01       	movw	r20, r6
 428:	92 01       	movw	r18, r4
 42a:	4d d3       	rcall	.+1690   	; 0xac6 <__mulsf3>
 42c:	9b 01       	movw	r18, r22
 42e:	ac 01       	movw	r20, r24
 430:	69 81       	ldd	r22, Y+1	; 0x01
 432:	7a 81       	ldd	r23, Y+2	; 0x02
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	9c 81       	ldd	r25, Y+4	; 0x04
 438:	ba d1       	rcall	.+884    	; 0x7ae <__subsf3>
 43a:	6b 01       	movw	r12, r22
 43c:	7c 01       	movw	r14, r24
			
			y = (uint16_t) ((ip * gain) + offset);
 43e:	b8 01       	movw	r22, r16
 440:	01 2e       	mov	r0, r17
 442:	00 0c       	add	r0, r0
 444:	88 0b       	sbc	r24, r24
 446:	99 0b       	sbc	r25, r25
 448:	b2 d2       	rcall	.+1380   	; 0x9ae <__floatsisf>
 44a:	a3 01       	movw	r20, r6
 44c:	92 01       	movw	r18, r4
 44e:	3b d3       	rcall	.+1654   	; 0xac6 <__mulsf3>
 450:	9b 01       	movw	r18, r22
 452:	ac 01       	movw	r20, r24
 454:	c7 01       	movw	r24, r14
 456:	b6 01       	movw	r22, r12
 458:	ab d1       	rcall	.+854    	; 0x7b0 <__addsf3>
 45a:	7b d2       	rcall	.+1270   	; 0x952 <__fixunssfsi>
 45c:	b3 94       	inc	r11
		}
		counter++;
 45e:	61 15       	cp	r22, r1
	if (ip >= ip_values[23])
	{
		y = lambda_values[23];
	}
	
	while ((y == 0) && (counter < 23))
 460:	71 05       	cpc	r23, r1
 462:	21 f4       	brne	.+8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 464:	96 e1       	ldi	r25, 0x16	; 22
 466:	9b 15       	cp	r25, r11
 468:	08 f0       	brcs	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46a:	80 cf       	rjmp	.-256    	; 0x36c <interpolate+0x5a>
 46c:	cb 01       	movw	r24, r22
		}
		counter++;
	}
	
	return y;
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	1f 91       	pop	r17
 47c:	0f 91       	pop	r16
 47e:	ff 90       	pop	r15
 480:	ef 90       	pop	r14
 482:	df 90       	pop	r13
 484:	cf 90       	pop	r12
 486:	bf 90       	pop	r11
 488:	7f 90       	pop	r7
 48a:	6f 90       	pop	r6
 48c:	5f 90       	pop	r5
 48e:	4f 90       	pop	r4
 490:	08 95       	ret

00000492 <main>:
 492:	11 d1       	rcall	.+546    	; 0x6b6 <uart_init>


int main(void)
{
	uart_init();
	uart2_sendS((uint8_t*) "reboot!", 7);
 494:	67 e0       	ldi	r22, 0x07	; 7
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	8f e2       	ldi	r24, 0x2F	; 47
 49a:	92 e0       	ldi	r25, 0x02	; 2
	adc_init();
 49c:	6d d1       	rcall	.+730    	; 0x778 <uart2_sendS>
 49e:	59 de       	rcall	.-846    	; 0x152 <adc_init>
	
	DDRB |= (1 << PB7);		// pb7 ist ausgang
 4a0:	84 b1       	in	r24, 0x04	; 4
 4a2:	80 68       	ori	r24, 0x80	; 128
 4a4:	84 b9       	out	0x04, r24	; 4
	// PORTB |= (1 << PB7);	// pb7 ist high

	eeprom_read_block((void*)signature, (const void*) eeprom_signature, sizeof(eeprom_signature));
 4a6:	4e e1       	ldi	r20, 0x1E	; 30
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	6e e8       	ldi	r22, 0x8E	; 142
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	84 e4       	ldi	r24, 0x44	; 68
 4b0:	93 e0       	ldi	r25, 0x03	; 3
 4b2:	a5 d3       	rcall	.+1866   	; 0xbfe <eeprom_read_block>
	eeprom_read_block((void*)versionInfo, (const void*) eeprom_versionInfo, sizeof(eeprom_versionInfo));
 4b4:	45 e2       	ldi	r20, 0x25	; 37
 4b6:	50 e0       	ldi	r21, 0x00	; 0
 4b8:	69 e6       	ldi	r22, 0x69	; 105
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	86 e9       	ldi	r24, 0x96	; 150
 4be:	93 e0       	ldi	r25, 0x03	; 3
 4c0:	9e d3       	rcall	.+1852   	; 0xbfe <eeprom_read_block>
	eeprom_read_block((void*)controllerSettings, (const void*) eeprom_config, sizeof(eeprom_config));
 4c2:	49 e0       	ldi	r20, 0x09	; 9
 4c4:	50 e0       	ldi	r21, 0x00	; 0
 4c6:	60 e6       	ldi	r22, 0x60	; 96
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	82 e6       	ldi	r24, 0x62	; 98
 4cc:	93 e0       	ldi	r25, 0x03	; 3
 4ce:	97 d3       	rcall	.+1838   	; 0xbfe <eeprom_read_block>
	
	eeprom_read_block((void*)ip_values, (const void*) eeprom_ip, sizeof(eeprom_ip));
 4d0:	40 e3       	ldi	r20, 0x30	; 48
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	60 e3       	ldi	r22, 0x30	; 48
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	82 e4       	ldi	r24, 0x42	; 66
 4da:	92 e0       	ldi	r25, 0x02	; 2
 4dc:	90 d3       	rcall	.+1824   	; 0xbfe <eeprom_read_block>
	eeprom_read_block((void*)lambda_values, (const void*) eeprom_lambda, sizeof(eeprom_lambda));
 4de:	40 e3       	ldi	r20, 0x30	; 48
 4e0:	50 e0       	ldi	r21, 0x00	; 0
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	84 ee       	ldi	r24, 0xE4	; 228
 4e8:	92 e0       	ldi	r25, 0x02	; 2
 4ea:	89 d3       	rcall	.+1810   	; 0xbfe <eeprom_read_block>
	
 	configuration = (tConfig*)controllerSettings;
 4ec:	82 e6       	ldi	r24, 0x62	; 98
 4ee:	93 e0       	ldi	r25, 0x03	; 3
 4f0:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <configuration+0x1>
 4f4:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <configuration>
	
	init_1s_timer();
 4f8:	cb d0       	rcall	.+406    	; 0x690 <init_1s_timer>
 4fa:	78 94       	sei
	
	uint16_t blah;
		
	sei();
 4fc:	eb e8       	ldi	r30, 0x8B	; 139
	
	sensor1.status = CJ125_OK;
 4fe:	f3 e0       	ldi	r31, 0x03	; 3
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	80 83       	st	Z, r24
 504:	8c ed       	ldi	r24, 0xDC	; 220
	sensor1.Ua_cal = 1500;
 506:	95 e0       	ldi	r25, 0x05	; 5
 508:	92 83       	std	Z+2, r25	; 0x02
 50a:	81 83       	std	Z+1, r24	; 0x01
 50c:	e4 ea       	ldi	r30, 0xA4	; 164

	uint8_t offset;
	uint8_t value;
	uint8_t pageIdentifier = 0;
	
	liveData[1] = 138;
 50e:	f2 e0       	ldi	r31, 0x02	; 2
 510:	8a e8       	ldi	r24, 0x8A	; 138
 512:	81 83       	std	Z+1, r24	; 0x01
 514:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <pwm1>
	
	liveData[6] = low(pwm1);
 518:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <pwm1+0x1>
 51c:	86 83       	std	Z+6, r24	; 0x06
 51e:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <pwm1>
	liveData[7] = high(pwm1);
 522:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <pwm1+0x1>
 526:	97 83       	std	Z+7, r25	; 0x07
 528:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <pwm2>
	
	liveData[8] = low(pwm2);
 52c:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <pwm2+0x1>
 530:	80 87       	std	Z+8, r24	; 0x08
	liveData[9] = high(pwm2);
 532:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <pwm2>
 536:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <pwm2+0x1>
 53a:	91 87       	std	Z+9, r25	; 0x09
	sensor1.status = CJ125_OK;
	sensor1.Ua_cal = 1500;

	uint8_t offset;
	uint8_t value;
	uint8_t pageIdentifier = 0;
 53c:	f1 2c       	mov	r15, r1
	liveData[9] = high(pwm2);
	
    /* Replace with your application code */
    while (1) 
    {
		switch (uart_getData())
 53e:	e9 d0       	rcall	.+466    	; 0x712 <uart_getData>
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	fc 01       	movw	r30, r24
 544:	e1 54       	subi	r30, 0x41	; 65
 546:	f1 09       	sbc	r31, r1
 548:	e7 31       	cpi	r30, 0x17	; 23
 54a:	f1 05       	cpc	r31, r1
 54c:	08 f0       	brcs	.+2      	; 0x550 <main+0xbe>
 54e:	96 c0       	rjmp	.+300    	; 0x67c <main+0x1ea>
 550:	88 27       	eor	r24, r24
 552:	ee 58       	subi	r30, 0x8E	; 142
 554:	ff 4f       	sbci	r31, 0xFF	; 255
 556:	8f 4f       	sbci	r24, 0xFF	; 255
 558:	3b c3       	rjmp	.+1654   	; 0xbd0 <__tablejump2__>
		{
			case 'F':	// serial protocol version request
				uart_sendS((uint8_t*) "001", 3);
 55a:	63 e0       	ldi	r22, 0x03	; 3
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	87 e3       	ldi	r24, 0x37	; 55
 560:	92 e0       	ldi	r25, 0x02	; 2
 562:	ef d0       	rcall	.+478    	; 0x742 <uart_sendS>
				break;
 564:	8b c0       	rjmp	.+278    	; 0x67c <main+0x1ea>
			case 'Q':	// code version
				uart_sendS((uint8_t*) signature, sizeof(signature));
 566:	6e e1       	ldi	r22, 0x1E	; 30
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	84 e4       	ldi	r24, 0x44	; 68
 56c:	93 e0       	ldi	r25, 0x03	; 3
 56e:	e9 d0       	rcall	.+466    	; 0x742 <uart_sendS>
 570:	85 c0       	rjmp	.+266    	; 0x67c <main+0x1ea>
				break;
 572:	64 e2       	ldi	r22, 0x24	; 36
				
			case 'S':	// signature, has to be the same like in ini-file
				uart_sendS((uint8_t*) versionInfo, sizeof(versionInfo)-1);
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	86 e9       	ldi	r24, 0x96	; 150
 578:	93 e0       	ldi	r25, 0x03	; 3
 57a:	e3 d0       	rcall	.+454    	; 0x742 <uart_sendS>
 57c:	7f c0       	rjmp	.+254    	; 0x67c <main+0x1ea>
				break;
 57e:	81 e0       	ldi	r24, 0x01	; 1
				
			case 'V':	// reading controller settings
				if (pageIdentifier == 0x01)
 580:	f8 12       	cpse	r15, r24
 582:	05 c0       	rjmp	.+10     	; 0x58e <main+0xfc>
				{
					uart_sendS((uint8_t*) controllerSettings, sizeof(controllerSettings));										
 584:	69 e0       	ldi	r22, 0x09	; 9
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	82 e6       	ldi	r24, 0x62	; 98
 58a:	93 e0       	ldi	r25, 0x03	; 3
 58c:	da d0       	rcall	.+436    	; 0x742 <uart_sendS>
				}
				
				if (pageIdentifier == 0x02)
 58e:	e2 e0       	ldi	r30, 0x02	; 2
 590:	fe 12       	cpse	r15, r30
				{
					uart_sendS((uint8_t*) ip_values, 48);
 592:	74 c0       	rjmp	.+232    	; 0x67c <main+0x1ea>
 594:	60 e3       	ldi	r22, 0x30	; 48
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	82 e4       	ldi	r24, 0x42	; 66
 59a:	92 e0       	ldi	r25, 0x02	; 2
 59c:	d2 d0       	rcall	.+420    	; 0x742 <uart_sendS>
					uart_sendS((uint8_t*) lambda_values, 48);
 59e:	60 e3       	ldi	r22, 0x30	; 48
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	84 ee       	ldi	r24, 0xE4	; 228
 5a4:	92 e0       	ldi	r25, 0x02	; 2
 5a6:	cd d0       	rcall	.+410    	; 0x742 <uart_sendS>
 5a8:	69 c0       	rjmp	.+210    	; 0x67c <main+0x1ea>
				}
				
				break;
				
			case 'A':	// reading live data
				adc_value = adc_read_avg(3, 5);
 5aa:	65 e0       	ldi	r22, 0x05	; 5
 5ac:	83 e0       	ldi	r24, 0x03	; 3
 5ae:	f0 dd       	rcall	.-1056   	; 0x190 <adc_read_avg>
 5b0:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <__data_end+0x1>
 5b4:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__data_end>
 5b8:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <__data_end>
				sensor1.Ua = adc2voltage_mili(adc_value);
 5bc:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <__data_end+0x1>
 5c0:	a8 e8       	ldi	r26, 0x88	; 136
	return ((float) __v * 5UL / 1024UL );
}

static __inline uint16_t __adc2voltage_mili(uint16_t __v)
{
	return ((uint16_t) __v * 5000UL / 1024UL );
 5c2:	b3 e1       	ldi	r27, 0x13	; 19
 5c4:	0d d3       	rcall	.+1562   	; 0xbe0 <__umulhisi3>
 5c6:	8b 01       	movw	r16, r22
 5c8:	9c 01       	movw	r18, r24
 5ca:	0f 2e       	mov	r0, r31
 5cc:	fa e0       	ldi	r31, 0x0A	; 10
 5ce:	36 95       	lsr	r19
 5d0:	27 95       	ror	r18
 5d2:	17 95       	ror	r17
 5d4:	07 95       	ror	r16
 5d6:	fa 95       	dec	r31
 5d8:	d1 f7       	brne	.-12     	; 0x5ce <main+0x13c>
 5da:	f0 2d       	mov	r31, r0
 5dc:	0f 2e       	mov	r0, r31
 5de:	fb e8       	ldi	r31, 0x8B	; 139
 5e0:	cf 2e       	mov	r12, r31
 5e2:	f3 e0       	ldi	r31, 0x03	; 3
 5e4:	df 2e       	mov	r13, r31
 5e6:	f0 2d       	mov	r31, r0
 5e8:	f6 01       	movw	r30, r12
 5ea:	03 83       	std	Z+3, r16	; 0x03
 5ec:	14 83       	std	Z+4, r17	; 0x04
				liveData[12] = low(sensor1.Ua);
 5ee:	c4 ea       	ldi	r28, 0xA4	; 164
 5f0:	d2 e0       	ldi	r29, 0x02	; 2
				liveData[13] = high(sensor1.Ua);
				
				sensor1.Ip = calculate_pump_current(sensor1.Ua, sensor1.Ua_cal);
 5f2:	0c 87       	std	Y+12, r16	; 0x0c
 5f4:	1d 87       	std	Y+13, r17	; 0x0d
 5f6:	61 81       	ldd	r22, Z+1	; 0x01
 5f8:	72 81       	ldd	r23, Z+2	; 0x02
 5fa:	80 2f       	mov	r24, r16
 5fc:	91 2f       	mov	r25, r17
 5fe:	75 de       	rcall	.-790    	; 0x2ea <calculate_pump_current>
								
				liveData[18] = low(sensor1.Ip);
 600:	f6 01       	movw	r30, r12
				liveData[19] = high(sensor1.Ip);
 602:	81 87       	std	Z+9, r24	; 0x09
				
				blah = interpolate(sensor1.Ip);
 604:	92 87       	std	Z+10, r25	; 0x0a
 606:	8a 8b       	std	Y+18, r24	; 0x12
				
				liveData[2] = low(blah);
 608:	9b 8b       	std	Y+19, r25	; 0x13
				liveData[3] = high(blah);
 60a:	83 de       	rcall	.-762    	; 0x312 <interpolate>
								
				uart_sendS((uint8_t*) liveData, sizeof(liveData));
 60c:	8a 83       	std	Y+2, r24	; 0x02
 60e:	9b 83       	std	Y+3, r25	; 0x03
 610:	60 e2       	ldi	r22, 0x20	; 32
 612:	70 e0       	ldi	r23, 0x00	; 0
				break;
				
			case 'W':	// update controller config string
				while (!uart_hasData()) {};	// wait for offset
 614:	ce 01       	movw	r24, r28
 616:	95 d0       	rcall	.+298    	; 0x742 <uart_sendS>
 618:	31 c0       	rjmp	.+98     	; 0x67c <main+0x1ea>
				offset = uart_getData();
 61a:	84 d0       	rcall	.+264    	; 0x724 <uart_hasData>
 61c:	88 23       	and	r24, r24
				while (!uart_hasData()) {};	// wait for value
 61e:	e9 f3       	breq	.-6      	; 0x61a <main+0x188>
 620:	78 d0       	rcall	.+240    	; 0x712 <uart_getData>
 622:	18 2f       	mov	r17, r24
 624:	7f d0       	rcall	.+254    	; 0x724 <uart_hasData>
				value = uart_getData();
 626:	88 23       	and	r24, r24
				controllerSettings[offset] = value;
 628:	e9 f3       	breq	.-6      	; 0x624 <main+0x192>
 62a:	73 d0       	rcall	.+230    	; 0x712 <uart_getData>
 62c:	e1 2f       	mov	r30, r17
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	ee 59       	subi	r30, 0x9E	; 158
				break;
 632:	fc 4f       	sbci	r31, 0xFC	; 252
				
			case 'E':	// execute button command, this command is always 3 byte long
				multiByteCommandBuffer[0] = 'E';
 634:	80 83       	st	Z, r24
 636:	22 c0       	rjmp	.+68     	; 0x67c <main+0x1ea>
				
				while (!uart_hasData()) {};
 638:	85 e4       	ldi	r24, 0x45	; 69
 63a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <multiByteCommandBuffer>
				multiByteCommandBuffer[1] = uart_getData();
 63e:	72 d0       	rcall	.+228    	; 0x724 <uart_hasData>
 640:	88 23       	and	r24, r24
 642:	e9 f3       	breq	.-6      	; 0x63e <main+0x1ac>
 644:	66 d0       	rcall	.+204    	; 0x712 <uart_getData>
			
				while (!uart_hasData()) {};
 646:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <multiByteCommandBuffer+0x1>
 64a:	6c d0       	rcall	.+216    	; 0x724 <uart_hasData>
 64c:	88 23       	and	r24, r24
				multiByteCommandBuffer[2] = uart_getData();
 64e:	e9 f3       	breq	.-6      	; 0x64a <main+0x1b8>
 650:	60 d0       	rcall	.+192    	; 0x712 <uart_getData>
 652:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <multiByteCommandBuffer+0x2>
				
				uart2_sendS((uint8_t*) multiByteCommandBuffer, 3);
 656:	63 e0       	ldi	r22, 0x03	; 3
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	84 ec       	ldi	r24, 0xC4	; 196
 65c:	92 e0       	ldi	r25, 0x02	; 2
 65e:	8c d0       	rcall	.+280    	; 0x778 <uart2_sendS>
 660:	0d c0       	rjmp	.+26     	; 0x67c <main+0x1ea>
				break;
 662:	49 e0       	ldi	r20, 0x09	; 9
				
			case 'B':	// push controller config string to eeprom
				eeprom_update_block((const void*) &controllerSettings, (void*) eeprom_config, sizeof(eeprom_config));
 664:	50 e0       	ldi	r21, 0x00	; 0
 666:	60 e6       	ldi	r22, 0x60	; 96
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	82 e6       	ldi	r24, 0x62	; 98
 66c:	93 e0       	ldi	r25, 0x03	; 3
 66e:	d7 d2       	rcall	.+1454   	; 0xc1e <eeprom_update_block>
 670:	05 c0       	rjmp	.+10     	; 0x67c <main+0x1ea>
 672:	58 d0       	rcall	.+176    	; 0x724 <uart_hasData>
				break;
 674:	88 23       	and	r24, r24
				
			case 'P':
				while (!uart_hasData()) {};
 676:	e9 f3       	breq	.-6      	; 0x672 <main+0x1e0>
 678:	4c d0       	rcall	.+152    	; 0x712 <uart_getData>
 67a:	f8 2e       	mov	r15, r24
 67c:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <mainLoopsPerSecond>
				pageIdentifier = uart_getData();
 680:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <mainLoopsPerSecond+0x1>
				break;								
		}
		
		mainLoopsPerSecond++;
 684:	01 96       	adiw	r24, 0x01	; 1
 686:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <mainLoopsPerSecond+0x1>
 68a:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <mainLoopsPerSecond>
 68e:	57 cf       	rjmp	.-338    	; 0x53e <main+0xac>

00000690 <init_1s_timer>:

void init_1s_timer (void)
{
	// 1s: prescale = 256 and preload = 3036
	// 1s: prescale = 1024 and preload = 49911
	TCNT1 = tcnt1_preload;
 690:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <tcnt1_preload>
 694:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <tcnt1_preload+0x1>
 698:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 69c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	TCCR1A = 0x00;
 6a0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B |= (1<<CS12);		// Timer mode with 1024 prescler
 6a4:	e1 e8       	ldi	r30, 0x81	; 129
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	84 60       	ori	r24, 0x04	; 4
 6ac:	80 83       	st	Z, r24
	TIMSK1 = (1 << TOIE1);		// Enable timer1 overflow interrupt(TOIE1)
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
 6b4:	08 95       	ret

000006b6 <uart_init>:

void uart_init (void)
{
	uint8_t dummy;
	
	UBRR3 = 8;
 6b6:	88 e0       	ldi	r24, 0x08	; 8
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
 6be:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
	// UCSR3B = (1 << RXEN3)|(1 << TXEN3)|(1 << RXCIE3);
	UCSR3B = (1 << RXEN3)|(1 << TXEN3);
 6c2:	88 e1       	ldi	r24, 0x18	; 24
 6c4:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
	UCSR3C = (1 << UCSZ31)|(1 << UCSZ30);
 6c8:	86 e0       	ldi	r24, 0x06	; 6
 6ca:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>
	
	// flush receiver buffer;
	while ( UCSR3A & (1<<RXC3) ) dummy = UDR3;
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <uart_init+0x1e>
 6d0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
 6d4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
 6d8:	88 23       	and	r24, r24
 6da:	d4 f3       	brlt	.-12     	; 0x6d0 <uart_init+0x1a>
	
	UBRR2 = 8;
 6dc:	88 e0       	ldi	r24, 0x08	; 8
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
 6e4:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
	UCSR2B = (1 << RXEN2)|(1 << TXEN2)|(1 << RXCIE2);
 6e8:	88 e9       	ldi	r24, 0x98	; 152
 6ea:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
	UCSR2C = (1 << UCSZ21)|(1 << UCSZ20);
 6ee:	86 e0       	ldi	r24, 0x06	; 6
 6f0:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7c00d2>
	
	// flush receiver buffer;
	while ( UCSR2A & (1<<RXC2) ) dummy = UDR2;
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <uart_init+0x44>
 6f6:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
 6fa:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 6fe:	88 23       	and	r24, r24
 700:	d4 f3       	brlt	.-12     	; 0x6f6 <uart_init+0x40>
}
 702:	08 95       	ret

00000704 <uart_sendC>:

void uart_sendC (const uint8_t data)
{
	while (!(UCSR3A & (1 << UDRE3)));
 704:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
 708:	95 ff       	sbrs	r25, 5
 70a:	fc cf       	rjmp	.-8      	; 0x704 <uart_sendC>
	UDR3 = data;
 70c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
 710:	08 95       	ret

00000712 <uart_getData>:
}

uint8_t uart_getData (void)
{
	if (UCSR3A & (1<<RXC3)) 
 712:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
 716:	88 23       	and	r24, r24
 718:	1c f4       	brge	.+6      	; 0x720 <uart_getData+0xe>
	{
		return UDR3;
 71a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
 71e:	08 95       	ret
	}
	else 
	{
		return 0;
 720:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 722:	08 95       	ret

00000724 <uart_hasData>:


bool uart_hasData (void)
{
	if (UCSR3A & (1<<RXC3))
 724:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
 728:	88 23       	and	r24, r24
 72a:	14 f4       	brge	.+4      	; 0x730 <uart_hasData+0xc>
	{
		return true;
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	08 95       	ret
	}
	else
	{
		return false;
 730:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 732:	08 95       	ret

00000734 <uart2_sendC>:

void uart2_sendC (const uint8_t data)
{
	while (!(UCSR2A & (1 << UDRE2)));
 734:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 738:	95 ff       	sbrs	r25, 5
 73a:	fc cf       	rjmp	.-8      	; 0x734 <uart2_sendC>
	UDR2 = data;
 73c:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
 740:	08 95       	ret

00000742 <uart_sendS>:
}

void uart_sendS(const uint8_t *pData, uint16_t size)
{
 742:	ef 92       	push	r14
 744:	ff 92       	push	r15
 746:	0f 93       	push	r16
 748:	1f 93       	push	r17
 74a:	cf 93       	push	r28
 74c:	df 93       	push	r29
 74e:	7c 01       	movw	r14, r24
 750:	8b 01       	movw	r16, r22
	uint16_t cnt = 0;
 752:	c0 e0       	ldi	r28, 0x00	; 0
 754:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (cnt < size)
 756:	06 c0       	rjmp	.+12     	; 0x764 <uart_sendS+0x22>
	{
		uart_sendC(pData[cnt]);
 758:	f7 01       	movw	r30, r14
 75a:	ec 0f       	add	r30, r28
 75c:	fd 1f       	adc	r31, r29
 75e:	80 81       	ld	r24, Z
 760:	d1 df       	rcall	.-94     	; 0x704 <uart_sendC>
		cnt++;
 762:	21 96       	adiw	r28, 0x01	; 1

void uart_sendS(const uint8_t *pData, uint16_t size)
{
	uint16_t cnt = 0;
	
	while (cnt < size)
 764:	c0 17       	cp	r28, r16
 766:	d1 07       	cpc	r29, r17
 768:	b8 f3       	brcs	.-18     	; 0x758 <uart_sendS+0x16>
	{
		uart_sendC(pData[cnt]);
		cnt++;
	}
}
 76a:	df 91       	pop	r29
 76c:	cf 91       	pop	r28
 76e:	1f 91       	pop	r17
 770:	0f 91       	pop	r16
 772:	ff 90       	pop	r15
 774:	ef 90       	pop	r14
 776:	08 95       	ret

00000778 <uart2_sendS>:

void uart2_sendS(const uint8_t *pData, uint16_t size)
{
 778:	ef 92       	push	r14
 77a:	ff 92       	push	r15
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	7c 01       	movw	r14, r24
 786:	8b 01       	movw	r16, r22
	uint16_t cnt = 0;
 788:	c0 e0       	ldi	r28, 0x00	; 0
 78a:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (cnt < size)
 78c:	06 c0       	rjmp	.+12     	; 0x79a <uart2_sendS+0x22>
	{
		uart2_sendC(pData[cnt]);
 78e:	f7 01       	movw	r30, r14
 790:	ec 0f       	add	r30, r28
 792:	fd 1f       	adc	r31, r29
 794:	80 81       	ld	r24, Z
 796:	ce df       	rcall	.-100    	; 0x734 <uart2_sendC>
		cnt++;
 798:	21 96       	adiw	r28, 0x01	; 1

void uart2_sendS(const uint8_t *pData, uint16_t size)
{
	uint16_t cnt = 0;
	
	while (cnt < size)
 79a:	c0 17       	cp	r28, r16
 79c:	d1 07       	cpc	r29, r17
 79e:	b8 f3       	brcs	.-18     	; 0x78e <uart2_sendS+0x16>
	{
		uart2_sendC(pData[cnt]);
		cnt++;
	}
}
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	1f 91       	pop	r17
 7a6:	0f 91       	pop	r16
 7a8:	ff 90       	pop	r15
 7aa:	ef 90       	pop	r14
 7ac:	08 95       	ret

000007ae <__subsf3>:
 7ae:	50 58       	subi	r21, 0x80	; 128

000007b0 <__addsf3>:
 7b0:	bb 27       	eor	r27, r27
 7b2:	aa 27       	eor	r26, r26
 7b4:	0e d0       	rcall	.+28     	; 0x7d2 <__addsf3x>
 7b6:	4d c1       	rjmp	.+666    	; 0xa52 <__fp_round>
 7b8:	3e d1       	rcall	.+636    	; 0xa36 <__fp_pscA>
 7ba:	30 f0       	brcs	.+12     	; 0x7c8 <__addsf3+0x18>
 7bc:	43 d1       	rcall	.+646    	; 0xa44 <__fp_pscB>
 7be:	20 f0       	brcs	.+8      	; 0x7c8 <__addsf3+0x18>
 7c0:	31 f4       	brne	.+12     	; 0x7ce <__addsf3+0x1e>
 7c2:	9f 3f       	cpi	r25, 0xFF	; 255
 7c4:	11 f4       	brne	.+4      	; 0x7ca <__addsf3+0x1a>
 7c6:	1e f4       	brtc	.+6      	; 0x7ce <__addsf3+0x1e>
 7c8:	33 c1       	rjmp	.+614    	; 0xa30 <__fp_nan>
 7ca:	0e f4       	brtc	.+2      	; 0x7ce <__addsf3+0x1e>
 7cc:	e0 95       	com	r30
 7ce:	e7 fb       	bst	r30, 7
 7d0:	29 c1       	rjmp	.+594    	; 0xa24 <__fp_inf>

000007d2 <__addsf3x>:
 7d2:	e9 2f       	mov	r30, r25
 7d4:	4f d1       	rcall	.+670    	; 0xa74 <__fp_split3>
 7d6:	80 f3       	brcs	.-32     	; 0x7b8 <__addsf3+0x8>
 7d8:	ba 17       	cp	r27, r26
 7da:	62 07       	cpc	r22, r18
 7dc:	73 07       	cpc	r23, r19
 7de:	84 07       	cpc	r24, r20
 7e0:	95 07       	cpc	r25, r21
 7e2:	18 f0       	brcs	.+6      	; 0x7ea <__addsf3x+0x18>
 7e4:	71 f4       	brne	.+28     	; 0x802 <__addsf3x+0x30>
 7e6:	9e f5       	brtc	.+102    	; 0x84e <__addsf3x+0x7c>
 7e8:	67 c1       	rjmp	.+718    	; 0xab8 <__fp_zero>
 7ea:	0e f4       	brtc	.+2      	; 0x7ee <__addsf3x+0x1c>
 7ec:	e0 95       	com	r30
 7ee:	0b 2e       	mov	r0, r27
 7f0:	ba 2f       	mov	r27, r26
 7f2:	a0 2d       	mov	r26, r0
 7f4:	0b 01       	movw	r0, r22
 7f6:	b9 01       	movw	r22, r18
 7f8:	90 01       	movw	r18, r0
 7fa:	0c 01       	movw	r0, r24
 7fc:	ca 01       	movw	r24, r20
 7fe:	a0 01       	movw	r20, r0
 800:	11 24       	eor	r1, r1
 802:	ff 27       	eor	r31, r31
 804:	59 1b       	sub	r21, r25
 806:	99 f0       	breq	.+38     	; 0x82e <__addsf3x+0x5c>
 808:	59 3f       	cpi	r21, 0xF9	; 249
 80a:	50 f4       	brcc	.+20     	; 0x820 <__addsf3x+0x4e>
 80c:	50 3e       	cpi	r21, 0xE0	; 224
 80e:	68 f1       	brcs	.+90     	; 0x86a <__addsf3x+0x98>
 810:	1a 16       	cp	r1, r26
 812:	f0 40       	sbci	r31, 0x00	; 0
 814:	a2 2f       	mov	r26, r18
 816:	23 2f       	mov	r18, r19
 818:	34 2f       	mov	r19, r20
 81a:	44 27       	eor	r20, r20
 81c:	58 5f       	subi	r21, 0xF8	; 248
 81e:	f3 cf       	rjmp	.-26     	; 0x806 <__addsf3x+0x34>
 820:	46 95       	lsr	r20
 822:	37 95       	ror	r19
 824:	27 95       	ror	r18
 826:	a7 95       	ror	r26
 828:	f0 40       	sbci	r31, 0x00	; 0
 82a:	53 95       	inc	r21
 82c:	c9 f7       	brne	.-14     	; 0x820 <__addsf3x+0x4e>
 82e:	7e f4       	brtc	.+30     	; 0x84e <__addsf3x+0x7c>
 830:	1f 16       	cp	r1, r31
 832:	ba 0b       	sbc	r27, r26
 834:	62 0b       	sbc	r22, r18
 836:	73 0b       	sbc	r23, r19
 838:	84 0b       	sbc	r24, r20
 83a:	ba f0       	brmi	.+46     	; 0x86a <__addsf3x+0x98>
 83c:	91 50       	subi	r25, 0x01	; 1
 83e:	a1 f0       	breq	.+40     	; 0x868 <__addsf3x+0x96>
 840:	ff 0f       	add	r31, r31
 842:	bb 1f       	adc	r27, r27
 844:	66 1f       	adc	r22, r22
 846:	77 1f       	adc	r23, r23
 848:	88 1f       	adc	r24, r24
 84a:	c2 f7       	brpl	.-16     	; 0x83c <__addsf3x+0x6a>
 84c:	0e c0       	rjmp	.+28     	; 0x86a <__addsf3x+0x98>
 84e:	ba 0f       	add	r27, r26
 850:	62 1f       	adc	r22, r18
 852:	73 1f       	adc	r23, r19
 854:	84 1f       	adc	r24, r20
 856:	48 f4       	brcc	.+18     	; 0x86a <__addsf3x+0x98>
 858:	87 95       	ror	r24
 85a:	77 95       	ror	r23
 85c:	67 95       	ror	r22
 85e:	b7 95       	ror	r27
 860:	f7 95       	ror	r31
 862:	9e 3f       	cpi	r25, 0xFE	; 254
 864:	08 f0       	brcs	.+2      	; 0x868 <__addsf3x+0x96>
 866:	b3 cf       	rjmp	.-154    	; 0x7ce <__addsf3+0x1e>
 868:	93 95       	inc	r25
 86a:	88 0f       	add	r24, r24
 86c:	08 f0       	brcs	.+2      	; 0x870 <__addsf3x+0x9e>
 86e:	99 27       	eor	r25, r25
 870:	ee 0f       	add	r30, r30
 872:	97 95       	ror	r25
 874:	87 95       	ror	r24
 876:	08 95       	ret

00000878 <__divsf3>:
 878:	0c d0       	rcall	.+24     	; 0x892 <__divsf3x>
 87a:	eb c0       	rjmp	.+470    	; 0xa52 <__fp_round>
 87c:	e3 d0       	rcall	.+454    	; 0xa44 <__fp_pscB>
 87e:	40 f0       	brcs	.+16     	; 0x890 <__divsf3+0x18>
 880:	da d0       	rcall	.+436    	; 0xa36 <__fp_pscA>
 882:	30 f0       	brcs	.+12     	; 0x890 <__divsf3+0x18>
 884:	21 f4       	brne	.+8      	; 0x88e <__divsf3+0x16>
 886:	5f 3f       	cpi	r21, 0xFF	; 255
 888:	19 f0       	breq	.+6      	; 0x890 <__divsf3+0x18>
 88a:	cc c0       	rjmp	.+408    	; 0xa24 <__fp_inf>
 88c:	51 11       	cpse	r21, r1
 88e:	15 c1       	rjmp	.+554    	; 0xaba <__fp_szero>
 890:	cf c0       	rjmp	.+414    	; 0xa30 <__fp_nan>

00000892 <__divsf3x>:
 892:	f0 d0       	rcall	.+480    	; 0xa74 <__fp_split3>
 894:	98 f3       	brcs	.-26     	; 0x87c <__divsf3+0x4>

00000896 <__divsf3_pse>:
 896:	99 23       	and	r25, r25
 898:	c9 f3       	breq	.-14     	; 0x88c <__divsf3+0x14>
 89a:	55 23       	and	r21, r21
 89c:	b1 f3       	breq	.-20     	; 0x88a <__divsf3+0x12>
 89e:	95 1b       	sub	r25, r21
 8a0:	55 0b       	sbc	r21, r21
 8a2:	bb 27       	eor	r27, r27
 8a4:	aa 27       	eor	r26, r26
 8a6:	62 17       	cp	r22, r18
 8a8:	73 07       	cpc	r23, r19
 8aa:	84 07       	cpc	r24, r20
 8ac:	38 f0       	brcs	.+14     	; 0x8bc <__divsf3_pse+0x26>
 8ae:	9f 5f       	subi	r25, 0xFF	; 255
 8b0:	5f 4f       	sbci	r21, 0xFF	; 255
 8b2:	22 0f       	add	r18, r18
 8b4:	33 1f       	adc	r19, r19
 8b6:	44 1f       	adc	r20, r20
 8b8:	aa 1f       	adc	r26, r26
 8ba:	a9 f3       	breq	.-22     	; 0x8a6 <__divsf3_pse+0x10>
 8bc:	33 d0       	rcall	.+102    	; 0x924 <__divsf3_pse+0x8e>
 8be:	0e 2e       	mov	r0, r30
 8c0:	3a f0       	brmi	.+14     	; 0x8d0 <__divsf3_pse+0x3a>
 8c2:	e0 e8       	ldi	r30, 0x80	; 128
 8c4:	30 d0       	rcall	.+96     	; 0x926 <__divsf3_pse+0x90>
 8c6:	91 50       	subi	r25, 0x01	; 1
 8c8:	50 40       	sbci	r21, 0x00	; 0
 8ca:	e6 95       	lsr	r30
 8cc:	00 1c       	adc	r0, r0
 8ce:	ca f7       	brpl	.-14     	; 0x8c2 <__divsf3_pse+0x2c>
 8d0:	29 d0       	rcall	.+82     	; 0x924 <__divsf3_pse+0x8e>
 8d2:	fe 2f       	mov	r31, r30
 8d4:	27 d0       	rcall	.+78     	; 0x924 <__divsf3_pse+0x8e>
 8d6:	66 0f       	add	r22, r22
 8d8:	77 1f       	adc	r23, r23
 8da:	88 1f       	adc	r24, r24
 8dc:	bb 1f       	adc	r27, r27
 8de:	26 17       	cp	r18, r22
 8e0:	37 07       	cpc	r19, r23
 8e2:	48 07       	cpc	r20, r24
 8e4:	ab 07       	cpc	r26, r27
 8e6:	b0 e8       	ldi	r27, 0x80	; 128
 8e8:	09 f0       	breq	.+2      	; 0x8ec <__divsf3_pse+0x56>
 8ea:	bb 0b       	sbc	r27, r27
 8ec:	80 2d       	mov	r24, r0
 8ee:	bf 01       	movw	r22, r30
 8f0:	ff 27       	eor	r31, r31
 8f2:	93 58       	subi	r25, 0x83	; 131
 8f4:	5f 4f       	sbci	r21, 0xFF	; 255
 8f6:	2a f0       	brmi	.+10     	; 0x902 <__divsf3_pse+0x6c>
 8f8:	9e 3f       	cpi	r25, 0xFE	; 254
 8fa:	51 05       	cpc	r21, r1
 8fc:	68 f0       	brcs	.+26     	; 0x918 <__divsf3_pse+0x82>
 8fe:	92 c0       	rjmp	.+292    	; 0xa24 <__fp_inf>
 900:	dc c0       	rjmp	.+440    	; 0xaba <__fp_szero>
 902:	5f 3f       	cpi	r21, 0xFF	; 255
 904:	ec f3       	brlt	.-6      	; 0x900 <__divsf3_pse+0x6a>
 906:	98 3e       	cpi	r25, 0xE8	; 232
 908:	dc f3       	brlt	.-10     	; 0x900 <__divsf3_pse+0x6a>
 90a:	86 95       	lsr	r24
 90c:	77 95       	ror	r23
 90e:	67 95       	ror	r22
 910:	b7 95       	ror	r27
 912:	f7 95       	ror	r31
 914:	9f 5f       	subi	r25, 0xFF	; 255
 916:	c9 f7       	brne	.-14     	; 0x90a <__divsf3_pse+0x74>
 918:	88 0f       	add	r24, r24
 91a:	91 1d       	adc	r25, r1
 91c:	96 95       	lsr	r25
 91e:	87 95       	ror	r24
 920:	97 f9       	bld	r25, 7
 922:	08 95       	ret
 924:	e1 e0       	ldi	r30, 0x01	; 1
 926:	66 0f       	add	r22, r22
 928:	77 1f       	adc	r23, r23
 92a:	88 1f       	adc	r24, r24
 92c:	bb 1f       	adc	r27, r27
 92e:	62 17       	cp	r22, r18
 930:	73 07       	cpc	r23, r19
 932:	84 07       	cpc	r24, r20
 934:	ba 07       	cpc	r27, r26
 936:	20 f0       	brcs	.+8      	; 0x940 <__divsf3_pse+0xaa>
 938:	62 1b       	sub	r22, r18
 93a:	73 0b       	sbc	r23, r19
 93c:	84 0b       	sbc	r24, r20
 93e:	ba 0b       	sbc	r27, r26
 940:	ee 1f       	adc	r30, r30
 942:	88 f7       	brcc	.-30     	; 0x926 <__divsf3_pse+0x90>
 944:	e0 95       	com	r30
 946:	08 95       	ret

00000948 <__fixsfsi>:
 948:	04 d0       	rcall	.+8      	; 0x952 <__fixunssfsi>
 94a:	68 94       	set
 94c:	b1 11       	cpse	r27, r1
 94e:	b5 c0       	rjmp	.+362    	; 0xaba <__fp_szero>
 950:	08 95       	ret

00000952 <__fixunssfsi>:
 952:	98 d0       	rcall	.+304    	; 0xa84 <__fp_splitA>
 954:	88 f0       	brcs	.+34     	; 0x978 <__fixunssfsi+0x26>
 956:	9f 57       	subi	r25, 0x7F	; 127
 958:	90 f0       	brcs	.+36     	; 0x97e <__fixunssfsi+0x2c>
 95a:	b9 2f       	mov	r27, r25
 95c:	99 27       	eor	r25, r25
 95e:	b7 51       	subi	r27, 0x17	; 23
 960:	a0 f0       	brcs	.+40     	; 0x98a <__fixunssfsi+0x38>
 962:	d1 f0       	breq	.+52     	; 0x998 <__fixunssfsi+0x46>
 964:	66 0f       	add	r22, r22
 966:	77 1f       	adc	r23, r23
 968:	88 1f       	adc	r24, r24
 96a:	99 1f       	adc	r25, r25
 96c:	1a f0       	brmi	.+6      	; 0x974 <__fixunssfsi+0x22>
 96e:	ba 95       	dec	r27
 970:	c9 f7       	brne	.-14     	; 0x964 <__fixunssfsi+0x12>
 972:	12 c0       	rjmp	.+36     	; 0x998 <__fixunssfsi+0x46>
 974:	b1 30       	cpi	r27, 0x01	; 1
 976:	81 f0       	breq	.+32     	; 0x998 <__fixunssfsi+0x46>
 978:	9f d0       	rcall	.+318    	; 0xab8 <__fp_zero>
 97a:	b1 e0       	ldi	r27, 0x01	; 1
 97c:	08 95       	ret
 97e:	9c c0       	rjmp	.+312    	; 0xab8 <__fp_zero>
 980:	67 2f       	mov	r22, r23
 982:	78 2f       	mov	r23, r24
 984:	88 27       	eor	r24, r24
 986:	b8 5f       	subi	r27, 0xF8	; 248
 988:	39 f0       	breq	.+14     	; 0x998 <__fixunssfsi+0x46>
 98a:	b9 3f       	cpi	r27, 0xF9	; 249
 98c:	cc f3       	brlt	.-14     	; 0x980 <__fixunssfsi+0x2e>
 98e:	86 95       	lsr	r24
 990:	77 95       	ror	r23
 992:	67 95       	ror	r22
 994:	b3 95       	inc	r27
 996:	d9 f7       	brne	.-10     	; 0x98e <__fixunssfsi+0x3c>
 998:	3e f4       	brtc	.+14     	; 0x9a8 <__fixunssfsi+0x56>
 99a:	90 95       	com	r25
 99c:	80 95       	com	r24
 99e:	70 95       	com	r23
 9a0:	61 95       	neg	r22
 9a2:	7f 4f       	sbci	r23, 0xFF	; 255
 9a4:	8f 4f       	sbci	r24, 0xFF	; 255
 9a6:	9f 4f       	sbci	r25, 0xFF	; 255
 9a8:	08 95       	ret

000009aa <__floatunsisf>:
 9aa:	e8 94       	clt
 9ac:	09 c0       	rjmp	.+18     	; 0x9c0 <__floatsisf+0x12>

000009ae <__floatsisf>:
 9ae:	97 fb       	bst	r25, 7
 9b0:	3e f4       	brtc	.+14     	; 0x9c0 <__floatsisf+0x12>
 9b2:	90 95       	com	r25
 9b4:	80 95       	com	r24
 9b6:	70 95       	com	r23
 9b8:	61 95       	neg	r22
 9ba:	7f 4f       	sbci	r23, 0xFF	; 255
 9bc:	8f 4f       	sbci	r24, 0xFF	; 255
 9be:	9f 4f       	sbci	r25, 0xFF	; 255
 9c0:	99 23       	and	r25, r25
 9c2:	a9 f0       	breq	.+42     	; 0x9ee <__floatsisf+0x40>
 9c4:	f9 2f       	mov	r31, r25
 9c6:	96 e9       	ldi	r25, 0x96	; 150
 9c8:	bb 27       	eor	r27, r27
 9ca:	93 95       	inc	r25
 9cc:	f6 95       	lsr	r31
 9ce:	87 95       	ror	r24
 9d0:	77 95       	ror	r23
 9d2:	67 95       	ror	r22
 9d4:	b7 95       	ror	r27
 9d6:	f1 11       	cpse	r31, r1
 9d8:	f8 cf       	rjmp	.-16     	; 0x9ca <__floatsisf+0x1c>
 9da:	fa f4       	brpl	.+62     	; 0xa1a <__floatsisf+0x6c>
 9dc:	bb 0f       	add	r27, r27
 9de:	11 f4       	brne	.+4      	; 0x9e4 <__floatsisf+0x36>
 9e0:	60 ff       	sbrs	r22, 0
 9e2:	1b c0       	rjmp	.+54     	; 0xa1a <__floatsisf+0x6c>
 9e4:	6f 5f       	subi	r22, 0xFF	; 255
 9e6:	7f 4f       	sbci	r23, 0xFF	; 255
 9e8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ea:	9f 4f       	sbci	r25, 0xFF	; 255
 9ec:	16 c0       	rjmp	.+44     	; 0xa1a <__floatsisf+0x6c>
 9ee:	88 23       	and	r24, r24
 9f0:	11 f0       	breq	.+4      	; 0x9f6 <__floatsisf+0x48>
 9f2:	96 e9       	ldi	r25, 0x96	; 150
 9f4:	11 c0       	rjmp	.+34     	; 0xa18 <__floatsisf+0x6a>
 9f6:	77 23       	and	r23, r23
 9f8:	21 f0       	breq	.+8      	; 0xa02 <__floatsisf+0x54>
 9fa:	9e e8       	ldi	r25, 0x8E	; 142
 9fc:	87 2f       	mov	r24, r23
 9fe:	76 2f       	mov	r23, r22
 a00:	05 c0       	rjmp	.+10     	; 0xa0c <__floatsisf+0x5e>
 a02:	66 23       	and	r22, r22
 a04:	71 f0       	breq	.+28     	; 0xa22 <__floatsisf+0x74>
 a06:	96 e8       	ldi	r25, 0x86	; 134
 a08:	86 2f       	mov	r24, r22
 a0a:	70 e0       	ldi	r23, 0x00	; 0
 a0c:	60 e0       	ldi	r22, 0x00	; 0
 a0e:	2a f0       	brmi	.+10     	; 0xa1a <__floatsisf+0x6c>
 a10:	9a 95       	dec	r25
 a12:	66 0f       	add	r22, r22
 a14:	77 1f       	adc	r23, r23
 a16:	88 1f       	adc	r24, r24
 a18:	da f7       	brpl	.-10     	; 0xa10 <__floatsisf+0x62>
 a1a:	88 0f       	add	r24, r24
 a1c:	96 95       	lsr	r25
 a1e:	87 95       	ror	r24
 a20:	97 f9       	bld	r25, 7
 a22:	08 95       	ret

00000a24 <__fp_inf>:
 a24:	97 f9       	bld	r25, 7
 a26:	9f 67       	ori	r25, 0x7F	; 127
 a28:	80 e8       	ldi	r24, 0x80	; 128
 a2a:	70 e0       	ldi	r23, 0x00	; 0
 a2c:	60 e0       	ldi	r22, 0x00	; 0
 a2e:	08 95       	ret

00000a30 <__fp_nan>:
 a30:	9f ef       	ldi	r25, 0xFF	; 255
 a32:	80 ec       	ldi	r24, 0xC0	; 192
 a34:	08 95       	ret

00000a36 <__fp_pscA>:
 a36:	00 24       	eor	r0, r0
 a38:	0a 94       	dec	r0
 a3a:	16 16       	cp	r1, r22
 a3c:	17 06       	cpc	r1, r23
 a3e:	18 06       	cpc	r1, r24
 a40:	09 06       	cpc	r0, r25
 a42:	08 95       	ret

00000a44 <__fp_pscB>:
 a44:	00 24       	eor	r0, r0
 a46:	0a 94       	dec	r0
 a48:	12 16       	cp	r1, r18
 a4a:	13 06       	cpc	r1, r19
 a4c:	14 06       	cpc	r1, r20
 a4e:	05 06       	cpc	r0, r21
 a50:	08 95       	ret

00000a52 <__fp_round>:
 a52:	09 2e       	mov	r0, r25
 a54:	03 94       	inc	r0
 a56:	00 0c       	add	r0, r0
 a58:	11 f4       	brne	.+4      	; 0xa5e <__fp_round+0xc>
 a5a:	88 23       	and	r24, r24
 a5c:	52 f0       	brmi	.+20     	; 0xa72 <__fp_round+0x20>
 a5e:	bb 0f       	add	r27, r27
 a60:	40 f4       	brcc	.+16     	; 0xa72 <__fp_round+0x20>
 a62:	bf 2b       	or	r27, r31
 a64:	11 f4       	brne	.+4      	; 0xa6a <__fp_round+0x18>
 a66:	60 ff       	sbrs	r22, 0
 a68:	04 c0       	rjmp	.+8      	; 0xa72 <__fp_round+0x20>
 a6a:	6f 5f       	subi	r22, 0xFF	; 255
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255
 a6e:	8f 4f       	sbci	r24, 0xFF	; 255
 a70:	9f 4f       	sbci	r25, 0xFF	; 255
 a72:	08 95       	ret

00000a74 <__fp_split3>:
 a74:	57 fd       	sbrc	r21, 7
 a76:	90 58       	subi	r25, 0x80	; 128
 a78:	44 0f       	add	r20, r20
 a7a:	55 1f       	adc	r21, r21
 a7c:	59 f0       	breq	.+22     	; 0xa94 <__fp_splitA+0x10>
 a7e:	5f 3f       	cpi	r21, 0xFF	; 255
 a80:	71 f0       	breq	.+28     	; 0xa9e <__fp_splitA+0x1a>
 a82:	47 95       	ror	r20

00000a84 <__fp_splitA>:
 a84:	88 0f       	add	r24, r24
 a86:	97 fb       	bst	r25, 7
 a88:	99 1f       	adc	r25, r25
 a8a:	61 f0       	breq	.+24     	; 0xaa4 <__fp_splitA+0x20>
 a8c:	9f 3f       	cpi	r25, 0xFF	; 255
 a8e:	79 f0       	breq	.+30     	; 0xaae <__fp_splitA+0x2a>
 a90:	87 95       	ror	r24
 a92:	08 95       	ret
 a94:	12 16       	cp	r1, r18
 a96:	13 06       	cpc	r1, r19
 a98:	14 06       	cpc	r1, r20
 a9a:	55 1f       	adc	r21, r21
 a9c:	f2 cf       	rjmp	.-28     	; 0xa82 <__fp_split3+0xe>
 a9e:	46 95       	lsr	r20
 aa0:	f1 df       	rcall	.-30     	; 0xa84 <__fp_splitA>
 aa2:	08 c0       	rjmp	.+16     	; 0xab4 <__fp_splitA+0x30>
 aa4:	16 16       	cp	r1, r22
 aa6:	17 06       	cpc	r1, r23
 aa8:	18 06       	cpc	r1, r24
 aaa:	99 1f       	adc	r25, r25
 aac:	f1 cf       	rjmp	.-30     	; 0xa90 <__fp_splitA+0xc>
 aae:	86 95       	lsr	r24
 ab0:	71 05       	cpc	r23, r1
 ab2:	61 05       	cpc	r22, r1
 ab4:	08 94       	sec
 ab6:	08 95       	ret

00000ab8 <__fp_zero>:
 ab8:	e8 94       	clt

00000aba <__fp_szero>:
 aba:	bb 27       	eor	r27, r27
 abc:	66 27       	eor	r22, r22
 abe:	77 27       	eor	r23, r23
 ac0:	cb 01       	movw	r24, r22
 ac2:	97 f9       	bld	r25, 7
 ac4:	08 95       	ret

00000ac6 <__mulsf3>:
 ac6:	0b d0       	rcall	.+22     	; 0xade <__mulsf3x>
 ac8:	c4 cf       	rjmp	.-120    	; 0xa52 <__fp_round>
 aca:	b5 df       	rcall	.-150    	; 0xa36 <__fp_pscA>
 acc:	28 f0       	brcs	.+10     	; 0xad8 <__mulsf3+0x12>
 ace:	ba df       	rcall	.-140    	; 0xa44 <__fp_pscB>
 ad0:	18 f0       	brcs	.+6      	; 0xad8 <__mulsf3+0x12>
 ad2:	95 23       	and	r25, r21
 ad4:	09 f0       	breq	.+2      	; 0xad8 <__mulsf3+0x12>
 ad6:	a6 cf       	rjmp	.-180    	; 0xa24 <__fp_inf>
 ad8:	ab cf       	rjmp	.-170    	; 0xa30 <__fp_nan>
 ada:	11 24       	eor	r1, r1
 adc:	ee cf       	rjmp	.-36     	; 0xaba <__fp_szero>

00000ade <__mulsf3x>:
 ade:	ca df       	rcall	.-108    	; 0xa74 <__fp_split3>
 ae0:	a0 f3       	brcs	.-24     	; 0xaca <__mulsf3+0x4>

00000ae2 <__mulsf3_pse>:
 ae2:	95 9f       	mul	r25, r21
 ae4:	d1 f3       	breq	.-12     	; 0xada <__mulsf3+0x14>
 ae6:	95 0f       	add	r25, r21
 ae8:	50 e0       	ldi	r21, 0x00	; 0
 aea:	55 1f       	adc	r21, r21
 aec:	62 9f       	mul	r22, r18
 aee:	f0 01       	movw	r30, r0
 af0:	72 9f       	mul	r23, r18
 af2:	bb 27       	eor	r27, r27
 af4:	f0 0d       	add	r31, r0
 af6:	b1 1d       	adc	r27, r1
 af8:	63 9f       	mul	r22, r19
 afa:	aa 27       	eor	r26, r26
 afc:	f0 0d       	add	r31, r0
 afe:	b1 1d       	adc	r27, r1
 b00:	aa 1f       	adc	r26, r26
 b02:	64 9f       	mul	r22, r20
 b04:	66 27       	eor	r22, r22
 b06:	b0 0d       	add	r27, r0
 b08:	a1 1d       	adc	r26, r1
 b0a:	66 1f       	adc	r22, r22
 b0c:	82 9f       	mul	r24, r18
 b0e:	22 27       	eor	r18, r18
 b10:	b0 0d       	add	r27, r0
 b12:	a1 1d       	adc	r26, r1
 b14:	62 1f       	adc	r22, r18
 b16:	73 9f       	mul	r23, r19
 b18:	b0 0d       	add	r27, r0
 b1a:	a1 1d       	adc	r26, r1
 b1c:	62 1f       	adc	r22, r18
 b1e:	83 9f       	mul	r24, r19
 b20:	a0 0d       	add	r26, r0
 b22:	61 1d       	adc	r22, r1
 b24:	22 1f       	adc	r18, r18
 b26:	74 9f       	mul	r23, r20
 b28:	33 27       	eor	r19, r19
 b2a:	a0 0d       	add	r26, r0
 b2c:	61 1d       	adc	r22, r1
 b2e:	23 1f       	adc	r18, r19
 b30:	84 9f       	mul	r24, r20
 b32:	60 0d       	add	r22, r0
 b34:	21 1d       	adc	r18, r1
 b36:	82 2f       	mov	r24, r18
 b38:	76 2f       	mov	r23, r22
 b3a:	6a 2f       	mov	r22, r26
 b3c:	11 24       	eor	r1, r1
 b3e:	9f 57       	subi	r25, 0x7F	; 127
 b40:	50 40       	sbci	r21, 0x00	; 0
 b42:	8a f0       	brmi	.+34     	; 0xb66 <__mulsf3_pse+0x84>
 b44:	e1 f0       	breq	.+56     	; 0xb7e <__mulsf3_pse+0x9c>
 b46:	88 23       	and	r24, r24
 b48:	4a f0       	brmi	.+18     	; 0xb5c <__mulsf3_pse+0x7a>
 b4a:	ee 0f       	add	r30, r30
 b4c:	ff 1f       	adc	r31, r31
 b4e:	bb 1f       	adc	r27, r27
 b50:	66 1f       	adc	r22, r22
 b52:	77 1f       	adc	r23, r23
 b54:	88 1f       	adc	r24, r24
 b56:	91 50       	subi	r25, 0x01	; 1
 b58:	50 40       	sbci	r21, 0x00	; 0
 b5a:	a9 f7       	brne	.-22     	; 0xb46 <__mulsf3_pse+0x64>
 b5c:	9e 3f       	cpi	r25, 0xFE	; 254
 b5e:	51 05       	cpc	r21, r1
 b60:	70 f0       	brcs	.+28     	; 0xb7e <__mulsf3_pse+0x9c>
 b62:	60 cf       	rjmp	.-320    	; 0xa24 <__fp_inf>
 b64:	aa cf       	rjmp	.-172    	; 0xaba <__fp_szero>
 b66:	5f 3f       	cpi	r21, 0xFF	; 255
 b68:	ec f3       	brlt	.-6      	; 0xb64 <__mulsf3_pse+0x82>
 b6a:	98 3e       	cpi	r25, 0xE8	; 232
 b6c:	dc f3       	brlt	.-10     	; 0xb64 <__mulsf3_pse+0x82>
 b6e:	86 95       	lsr	r24
 b70:	77 95       	ror	r23
 b72:	67 95       	ror	r22
 b74:	b7 95       	ror	r27
 b76:	f7 95       	ror	r31
 b78:	e7 95       	ror	r30
 b7a:	9f 5f       	subi	r25, 0xFF	; 255
 b7c:	c1 f7       	brne	.-16     	; 0xb6e <__mulsf3_pse+0x8c>
 b7e:	fe 2b       	or	r31, r30
 b80:	88 0f       	add	r24, r24
 b82:	91 1d       	adc	r25, r1
 b84:	96 95       	lsr	r25
 b86:	87 95       	ror	r24
 b88:	97 f9       	bld	r25, 7
 b8a:	08 95       	ret

00000b8c <__udivmodsi4>:
 b8c:	a1 e2       	ldi	r26, 0x21	; 33
 b8e:	1a 2e       	mov	r1, r26
 b90:	aa 1b       	sub	r26, r26
 b92:	bb 1b       	sub	r27, r27
 b94:	fd 01       	movw	r30, r26
 b96:	0d c0       	rjmp	.+26     	; 0xbb2 <__udivmodsi4_ep>

00000b98 <__udivmodsi4_loop>:
 b98:	aa 1f       	adc	r26, r26
 b9a:	bb 1f       	adc	r27, r27
 b9c:	ee 1f       	adc	r30, r30
 b9e:	ff 1f       	adc	r31, r31
 ba0:	a2 17       	cp	r26, r18
 ba2:	b3 07       	cpc	r27, r19
 ba4:	e4 07       	cpc	r30, r20
 ba6:	f5 07       	cpc	r31, r21
 ba8:	20 f0       	brcs	.+8      	; 0xbb2 <__udivmodsi4_ep>
 baa:	a2 1b       	sub	r26, r18
 bac:	b3 0b       	sbc	r27, r19
 bae:	e4 0b       	sbc	r30, r20
 bb0:	f5 0b       	sbc	r31, r21

00000bb2 <__udivmodsi4_ep>:
 bb2:	66 1f       	adc	r22, r22
 bb4:	77 1f       	adc	r23, r23
 bb6:	88 1f       	adc	r24, r24
 bb8:	99 1f       	adc	r25, r25
 bba:	1a 94       	dec	r1
 bbc:	69 f7       	brne	.-38     	; 0xb98 <__udivmodsi4_loop>
 bbe:	60 95       	com	r22
 bc0:	70 95       	com	r23
 bc2:	80 95       	com	r24
 bc4:	90 95       	com	r25
 bc6:	9b 01       	movw	r18, r22
 bc8:	ac 01       	movw	r20, r24
 bca:	bd 01       	movw	r22, r26
 bcc:	cf 01       	movw	r24, r30
 bce:	08 95       	ret

00000bd0 <__tablejump2__>:
 bd0:	ee 0f       	add	r30, r30
 bd2:	ff 1f       	adc	r31, r31
 bd4:	88 1f       	adc	r24, r24
 bd6:	8b bf       	out	0x3b, r24	; 59
 bd8:	07 90       	elpm	r0, Z+
 bda:	f6 91       	elpm	r31, Z
 bdc:	e0 2d       	mov	r30, r0
 bde:	19 94       	eijmp

00000be0 <__umulhisi3>:
 be0:	a2 9f       	mul	r26, r18
 be2:	b0 01       	movw	r22, r0
 be4:	b3 9f       	mul	r27, r19
 be6:	c0 01       	movw	r24, r0
 be8:	a3 9f       	mul	r26, r19
 bea:	70 0d       	add	r23, r0
 bec:	81 1d       	adc	r24, r1
 bee:	11 24       	eor	r1, r1
 bf0:	91 1d       	adc	r25, r1
 bf2:	b2 9f       	mul	r27, r18
 bf4:	70 0d       	add	r23, r0
 bf6:	81 1d       	adc	r24, r1
 bf8:	11 24       	eor	r1, r1
 bfa:	91 1d       	adc	r25, r1
 bfc:	08 95       	ret

00000bfe <eeprom_read_block>:
 bfe:	dc 01       	movw	r26, r24
 c00:	cb 01       	movw	r24, r22

00000c02 <eeprom_read_blraw>:
 c02:	fc 01       	movw	r30, r24
 c04:	f9 99       	sbic	0x1f, 1	; 31
 c06:	fe cf       	rjmp	.-4      	; 0xc04 <eeprom_read_blraw+0x2>
 c08:	06 c0       	rjmp	.+12     	; 0xc16 <eeprom_read_blraw+0x14>
 c0a:	f2 bd       	out	0x22, r31	; 34
 c0c:	e1 bd       	out	0x21, r30	; 33
 c0e:	f8 9a       	sbi	0x1f, 0	; 31
 c10:	31 96       	adiw	r30, 0x01	; 1
 c12:	00 b4       	in	r0, 0x20	; 32
 c14:	0d 92       	st	X+, r0
 c16:	41 50       	subi	r20, 0x01	; 1
 c18:	50 40       	sbci	r21, 0x00	; 0
 c1a:	b8 f7       	brcc	.-18     	; 0xc0a <eeprom_read_blraw+0x8>
 c1c:	08 95       	ret

00000c1e <eeprom_update_block>:
 c1e:	dc 01       	movw	r26, r24
 c20:	a4 0f       	add	r26, r20
 c22:	b5 1f       	adc	r27, r21
 c24:	41 50       	subi	r20, 0x01	; 1
 c26:	50 40       	sbci	r21, 0x00	; 0
 c28:	40 f0       	brcs	.+16     	; 0xc3a <eeprom_update_block+0x1c>
 c2a:	cb 01       	movw	r24, r22
 c2c:	84 0f       	add	r24, r20
 c2e:	95 1f       	adc	r25, r21
 c30:	2e 91       	ld	r18, -X
 c32:	05 d0       	rcall	.+10     	; 0xc3e <eeprom_update_r18>
 c34:	41 50       	subi	r20, 0x01	; 1
 c36:	50 40       	sbci	r21, 0x00	; 0
 c38:	d8 f7       	brcc	.-10     	; 0xc30 <eeprom_update_block+0x12>
 c3a:	08 95       	ret

00000c3c <eeprom_update_byte>:
 c3c:	26 2f       	mov	r18, r22

00000c3e <eeprom_update_r18>:
 c3e:	f9 99       	sbic	0x1f, 1	; 31
 c40:	fe cf       	rjmp	.-4      	; 0xc3e <eeprom_update_r18>
 c42:	92 bd       	out	0x22, r25	; 34
 c44:	81 bd       	out	0x21, r24	; 33
 c46:	f8 9a       	sbi	0x1f, 0	; 31
 c48:	01 97       	sbiw	r24, 0x01	; 1
 c4a:	00 b4       	in	r0, 0x20	; 32
 c4c:	02 16       	cp	r0, r18
 c4e:	39 f0       	breq	.+14     	; 0xc5e <eeprom_update_r18+0x20>
 c50:	1f ba       	out	0x1f, r1	; 31
 c52:	20 bd       	out	0x20, r18	; 32
 c54:	0f b6       	in	r0, 0x3f	; 63
 c56:	f8 94       	cli
 c58:	fa 9a       	sbi	0x1f, 2	; 31
 c5a:	f9 9a       	sbi	0x1f, 1	; 31
 c5c:	0f be       	out	0x3f, r0	; 63
 c5e:	08 95       	ret

00000c60 <_exit>:
 c60:	f8 94       	cli

00000c62 <__stop_program>:
 c62:	ff cf       	rjmp	.-2      	; 0xc62 <__stop_program>

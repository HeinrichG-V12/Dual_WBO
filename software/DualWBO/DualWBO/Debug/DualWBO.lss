
DualWBO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000588  0000061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000588  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800106  00800106  00000622  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002386  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001556  00000000  00000000  00002b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac4  00000000  00000000  000040c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00004b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bd7  00000000  00000000  00004e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000914  00000000  00000000  00005a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000637b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a6 e0       	ldi	r26, 0x06	; 6
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	ae 30       	cpi	r26, 0x0E	; 14
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	e8 e8       	ldi	r30, 0x88	; 136
  b8:	f5 e0       	ldi	r31, 0x05	; 5
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	0b bf       	out	0x3b, r16	; 59
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a6 30       	cpi	r26, 0x06	; 6
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>
  ca:	71 d0       	rcall	.+226    	; 0x1ae <main>
  cc:	5b c2       	rjmp	.+1206   	; 0x584 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <_ZN3Adc11getInstanceEv>:
	// init adc...
}

Adc* Adc::getInstance()
{
	if( _instance == nullptr )
  d0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
  d4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
  d8:	89 2b       	or	r24, r25
  da:	39 f4       	brne	.+14     	; 0xea <_ZN3Adc11getInstanceEv+0x1a>
	_instance = new Adc();
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	7d d0       	rcall	.+250    	; 0x1dc <_Znwj>
  e2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
  e6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	return _instance;
}
  ea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
  ee:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
  f2:	08 95       	ret

000000f4 <_ZN3Adc9readValueEhh>:

uint16_t Adc::readValue(uint8_t channel, uint8_t samples)
{
	return 0;
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	08 95       	ret

000000fa <_ZN6HeaterC1Ev>:
 */ 

#include "heater.h"
#include "../helpers.h"

Heater::Heater ()
  fa:	6f 92       	push	r6
  fc:	7f 92       	push	r7
  fe:	8f 92       	push	r8
 100:	9f 92       	push	r9
 102:	af 92       	push	r10
 104:	bf 92       	push	r11
 106:	cf 92       	push	r12
 108:	df 92       	push	r13
 10a:	ef 92       	push	r14
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	68 97       	sbiw	r28, 0x18	; 24
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	02 96       	adiw	r24, 0x02	; 2
 128:	3c 01       	movw	r6, r24
 12a:	0f 2e       	mov	r0, r31
 12c:	f0 ef       	ldi	r31, 0xF0	; 240
 12e:	8f 2e       	mov	r8, r31
 130:	91 2c       	mov	r9, r1
 132:	f0 2d       	mov	r31, r0
 134:	a1 2c       	mov	r10, r1
 136:	b1 2c       	mov	r11, r1
 138:	0f 2e       	mov	r0, r31
 13a:	fd ec       	ldi	r31, 0xCD	; 205
 13c:	cf 2e       	mov	r12, r31
 13e:	fc ec       	ldi	r31, 0xCC	; 204
 140:	df 2e       	mov	r13, r31
 142:	fc e4       	ldi	r31, 0x4C	; 76
 144:	ef 2e       	mov	r14, r31
 146:	f0 e4       	ldi	r31, 0x40	; 64
 148:	ff 2e       	mov	r15, r31
 14a:	f0 2d       	mov	r31, r0
 14c:	0d ec       	ldi	r16, 0xCD	; 205
 14e:	1c ec       	ldi	r17, 0xCC	; 204
 150:	2c e4       	ldi	r18, 0x4C	; 76
 152:	3f e3       	ldi	r19, 0x3F	; 63
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	60 ea       	ldi	r22, 0xA0	; 160
 15a:	70 e4       	ldi	r23, 0x40	; 64
 15c:	41 d0       	rcall	.+130    	; 0x1e0 <_ZN3PIDC1Efffii>
{
	
	this->pid = PID();
 15e:	0d ec       	ldi	r16, 0xCD	; 205
 160:	1c ec       	ldi	r17, 0xCC	; 204
 162:	2c e4       	ldi	r18, 0x4C	; 76
 164:	3f e3       	ldi	r19, 0x3F	; 63
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	60 ea       	ldi	r22, 0xA0	; 160
 16c:	70 e4       	ldi	r23, 0x40	; 64
 16e:	ce 01       	movw	r24, r28
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	36 d0       	rcall	.+108    	; 0x1e0 <_ZN3PIDC1Efffii>
 174:	88 e1       	ldi	r24, 0x18	; 24
 176:	fe 01       	movw	r30, r28
 178:	31 96       	adiw	r30, 0x01	; 1
 17a:	d3 01       	movw	r26, r6
 17c:	01 90       	ld	r0, Z+
 17e:	0d 92       	st	X+, r0
 180:	8a 95       	dec	r24
 182:	e1 f7       	brne	.-8      	; 0x17c <_ZN6HeaterC1Ev+0x82>
}
 184:	68 96       	adiw	r28, 0x18	; 24
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	df 90       	pop	r13
 19e:	cf 90       	pop	r12
 1a0:	bf 90       	pop	r11
 1a2:	af 90       	pop	r10
 1a4:	9f 90       	pop	r9
 1a6:	8f 90       	pop	r8
 1a8:	7f 90       	pop	r7
 1aa:	6f 90       	pop	r6
 1ac:	08 95       	ret

000001ae <main>:
#include "adc/adc.h"

// https://de.wikibooks.org/wiki/C%2B%2B-Programmierung/_Eigene_Datentypen_definieren/_Erstellen_und_Zerst%C3%B6ren
// https://www.oreilly.com/library/view/c-cookbook/0596007612/ch08s10.html
int main(void)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	e8 97       	sbiw	r28, 0x38	; 56
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
	Sensor sensor1 = Sensor();
 1c2:	68 e0       	ldi	r22, 0x08	; 8
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	37 d0       	rcall	.+110    	; 0x238 <_ZN6SensorC1Eh>
	Spi* spi = Spi::getInstance();
 1ca:	93 d0       	rcall	.+294    	; 0x2f2 <_ZN3Spi11getInstanceEv>
 1cc:	6f ef       	ldi	r22, 0xFF	; 255
	spi->spi_readWrite(0xffff);
 1ce:	7f ef       	ldi	r23, 0xFF	; 255
 1d0:	a8 d0       	rcall	.+336    	; 0x322 <_ZN3Spi13spi_readWriteEj>
	Adc* adc = Adc::getInstance();
 1d2:	7e df       	rcall	.-260    	; 0xd0 <_ZN3Adc11getInstanceEv>
	adc->readValue(0, 5);
 1d4:	45 e0       	ldi	r20, 0x05	; 5
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	8d df       	rcall	.-230    	; 0xf4 <_ZN3Adc9readValueEhh>
 1da:	ff cf       	rjmp	.-2      	; 0x1da <main+0x2c>

000001dc <_Znwj>:
 1dc:	b2 c0       	rjmp	.+356    	; 0x342 <malloc>
//extern "C" void __cxa_pure_virtual(void);

void * operator new(size_t size)
{
	return malloc(size);
}
 1de:	08 95       	ret

000001e0 <_ZN3PIDC1Efffii>:
 *  Author: Heinrich
 */ 

#include "pid.h"

PID::PID(float pGain, float iGain, float dGain, int16_t pwmMin, int16_t pwmMax)
 1e0:	8f 92       	push	r8
 1e2:	9f 92       	push	r9
 1e4:	af 92       	push	r10
 1e6:	bf 92       	push	r11
 1e8:	cf 92       	push	r12
 1ea:	df 92       	push	r13
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	fc 01       	movw	r30, r24
{
	this->pGain = pGain;
 1fe:	40 83       	st	Z, r20
 200:	51 83       	std	Z+1, r21	; 0x01
 202:	62 83       	std	Z+2, r22	; 0x02
 204:	73 83       	std	Z+3, r23	; 0x03
	this->iGain = iGain;
 206:	04 83       	std	Z+4, r16	; 0x04
 208:	15 83       	std	Z+5, r17	; 0x05
 20a:	26 83       	std	Z+6, r18	; 0x06
 20c:	37 83       	std	Z+7, r19	; 0x07
	this->dGain = dGain;
 20e:	c0 86       	std	Z+8, r12	; 0x08
 210:	d1 86       	std	Z+9, r13	; 0x09
 212:	e2 86       	std	Z+10, r14	; 0x0a
 214:	f3 86       	std	Z+11, r15	; 0x0b
	this->pwmMin = pwmMin;
 216:	b5 8a       	std	Z+21, r11	; 0x15
 218:	a4 8a       	std	Z+20, r10	; 0x14
	this->pwmMax = pwmMax;
 21a:	97 8a       	std	Z+23, r9	; 0x17
 21c:	86 8a       	std	Z+22, r8	; 0x16
}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	df 90       	pop	r13
 22c:	cf 90       	pop	r12
 22e:	bf 90       	pop	r11
 230:	af 90       	pop	r10
 232:	9f 90       	pop	r9
 234:	8f 90       	pop	r8
 236:	08 95       	ret

00000238 <_ZN6SensorC1Eh>:
 *  Author: Heinrich
 */ 

#include "sensor.h"

Sensor::Sensor (uint8_t amplificationFactor)
 238:	df 92       	push	r13
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	6a 97       	sbiw	r28, 0x1a	; 26
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
 256:	8c 01       	movw	r16, r24
 258:	d6 2e       	mov	r13, r22
 25a:	fc 01       	movw	r30, r24
 25c:	10 82       	st	Z, r1
 25e:	8c ec       	ldi	r24, 0xCC	; 204
 260:	91 ef       	ldi	r25, 0xF1	; 241
 262:	92 83       	std	Z+2, r25	; 0x02
 264:	81 83       	std	Z+1, r24	; 0x01
 266:	88 e0       	ldi	r24, 0x08	; 8
 268:	83 83       	std	Z+3, r24	; 0x03
 26a:	15 82       	std	Z+5, r1	; 0x05
 26c:	14 82       	std	Z+4, r1	; 0x04
 26e:	17 82       	std	Z+7, r1	; 0x07
 270:	16 82       	std	Z+6, r1	; 0x06
 272:	11 86       	std	Z+9, r1	; 0x09
 274:	10 86       	std	Z+8, r1	; 0x08
 276:	13 86       	std	Z+11, r1	; 0x0b
 278:	12 86       	std	Z+10, r1	; 0x0a
 27a:	15 86       	std	Z+13, r1	; 0x0d
 27c:	14 86       	std	Z+12, r1	; 0x0c
 27e:	17 86       	std	Z+15, r1	; 0x0f
 280:	16 86       	std	Z+14, r1	; 0x0e
 282:	11 8a       	std	Z+17, r1	; 0x11
 284:	10 8a       	std	Z+16, r1	; 0x10
 286:	13 8a       	std	Z+19, r1	; 0x13
 288:	12 8a       	std	Z+18, r1	; 0x12
 28a:	15 8a       	std	Z+21, r1	; 0x15
 28c:	14 8a       	std	Z+20, r1	; 0x14
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	86 8b       	std	Z+22, r24	; 0x16
 292:	17 8a       	std	Z+23, r1	; 0x17
 294:	78 01       	movw	r14, r16
 296:	fe e1       	ldi	r31, 0x1E	; 30
 298:	ef 0e       	add	r14, r31
 29a:	f1 1c       	adc	r15, r1
 29c:	c7 01       	movw	r24, r14
 29e:	2d df       	rcall	.-422    	; 0xfa <_ZN6HeaterC1Ev>
{
	this->Amplification = amplificationFactor;
 2a0:	f8 01       	movw	r30, r16
 2a2:	d3 82       	std	Z+3, r13	; 0x03
	this->sensorStatus = SensorStatus::ERROR;
 2a4:	84 e1       	ldi	r24, 0x14	; 20
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	91 8f       	std	Z+25, r25	; 0x19
 2aa:	80 8f       	std	Z+24, r24	; 0x18
	this->sensorFaultState = SensorFaultState::OK;
 2ac:	15 8e       	std	Z+29, r1	; 0x1d
 2ae:	14 8e       	std	Z+28, r1	; 0x1c
	this->sensorDetectedStatus = SensorDetectedStatus::BOSCH_LSU49;
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	93 8f       	std	Z+27, r25	; 0x1b
 2b6:	82 8f       	std	Z+26, r24	; 0x1a
	this->heater = Heater();
 2b8:	ce 01       	movw	r24, r28
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	1e df       	rcall	.-452    	; 0xfa <_ZN6HeaterC1Ev>
 2be:	8a e1       	ldi	r24, 0x1A	; 26
 2c0:	fe 01       	movw	r30, r28
 2c2:	31 96       	adiw	r30, 0x01	; 1
 2c4:	d7 01       	movw	r26, r14
 2c6:	01 90       	ld	r0, Z+
 2c8:	0d 92       	st	X+, r0
 2ca:	8a 95       	dec	r24
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <_ZN6SensorC1Eh+0x8e>
}
 2ce:	6a 96       	adiw	r28, 0x1a	; 26
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	cd bf       	out	0x3d, r28	; 61
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	ff 90       	pop	r15
 2e4:	ef 90       	pop	r14
 2e6:	df 90       	pop	r13
 2e8:	08 95       	ret

000002ea <_ZN3SpiC1Ev>:
Spi* Spi::_instance = nullptr;

Spi::Spi()
{
	// enable spi, 2MHz (div 128), master, mode1 (cpol 0, cpha 1)
	SPCR |= (1 << SPE)|(0 << DORD)|(1 << MSTR)|(0 << CPOL)|(1 << CPHA)|(1 << SPR1)|(1 << SPR0);
 2ea:	8c b5       	in	r24, 0x2c	; 44
 2ec:	87 65       	ori	r24, 0x57	; 87
 2ee:	8c bd       	out	0x2c, r24	; 44
 2f0:	08 95       	ret

000002f2 <_ZN3Spi11getInstanceEv>:
}


Spi* Spi::getInstance() {
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
	if (_instance == nullptr) {
 2f6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZN3Spi9_instanceE>
 2fa:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZN3Spi9_instanceE+0x1>
 2fe:	89 2b       	or	r24, r25
 300:	49 f4       	brne	.+18     	; 0x314 <_ZN3Spi11getInstanceEv+0x22>
		_instance = new Spi();
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	6a df       	rcall	.-300    	; 0x1dc <_Znwj>
 308:	ec 01       	movw	r28, r24
 30a:	ef df       	rcall	.-34     	; 0x2ea <_ZN3SpiC1Ev>
 30c:	d0 93 09 01 	sts	0x0109, r29	; 0x800109 <_ZN3Spi9_instanceE+0x1>
 310:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <_ZN3Spi9_instanceE>
	}
	return(_instance);
}
 314:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZN3Spi9_instanceE>
 318:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZN3Spi9_instanceE+0x1>
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <_ZN3Spi13spi_readWriteEj>:

uint16_t Spi::spi_readWrite(uint16_t data)
{
	uint8_t byte1, byte2;
	
	SPDR = (data >> 8);
 322:	7e bd       	out	0x2e, r23	; 46
	while(!(SPSR & (1<<SPIF)));
 324:	0d b4       	in	r0, 0x2d	; 45
 326:	07 fe       	sbrs	r0, 7
 328:	fd cf       	rjmp	.-6      	; 0x324 <_ZN3Spi13spi_readWriteEj+0x2>
	byte1 = SPDR;
 32a:	8e b5       	in	r24, 0x2e	; 46
	byte1 &= ~((1 << 7)|(1 << 6));	// clear two most significant bits in control byte because of don't care, cj125 manual, page 16
 32c:	8f 73       	andi	r24, 0x3F	; 63
	SPDR = (data & 0xFF);
 32e:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF)));
 330:	0d b4       	in	r0, 0x2d	; 45
 332:	07 fe       	sbrs	r0, 7
 334:	fd cf       	rjmp	.-6      	; 0x330 <_ZN3Spi13spi_readWriteEj+0xe>
	byte2 = SPDR;
 336:	2e b5       	in	r18, 0x2e	; 46
	
	return (uint16_t)((byte1<<8)|byte2);
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	98 2f       	mov	r25, r24
 33c:	88 27       	eor	r24, r24
 33e:	82 2b       	or	r24, r18
 340:	08 95       	ret

00000342 <malloc>:
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	82 30       	cpi	r24, 0x02	; 2
 34c:	91 05       	cpc	r25, r1
 34e:	10 f4       	brcc	.+4      	; 0x354 <malloc+0x12>
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__flp>
 358:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__flp+0x1>
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	a0 e0       	ldi	r26, 0x00	; 0
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	30 97       	sbiw	r30, 0x00	; 0
 366:	19 f1       	breq	.+70     	; 0x3ae <malloc+0x6c>
 368:	40 81       	ld	r20, Z
 36a:	51 81       	ldd	r21, Z+1	; 0x01
 36c:	02 81       	ldd	r16, Z+2	; 0x02
 36e:	13 81       	ldd	r17, Z+3	; 0x03
 370:	48 17       	cp	r20, r24
 372:	59 07       	cpc	r21, r25
 374:	c8 f0       	brcs	.+50     	; 0x3a8 <malloc+0x66>
 376:	84 17       	cp	r24, r20
 378:	95 07       	cpc	r25, r21
 37a:	69 f4       	brne	.+26     	; 0x396 <malloc+0x54>
 37c:	10 97       	sbiw	r26, 0x00	; 0
 37e:	31 f0       	breq	.+12     	; 0x38c <malloc+0x4a>
 380:	12 96       	adiw	r26, 0x02	; 2
 382:	0c 93       	st	X, r16
 384:	12 97       	sbiw	r26, 0x02	; 2
 386:	13 96       	adiw	r26, 0x03	; 3
 388:	1c 93       	st	X, r17
 38a:	27 c0       	rjmp	.+78     	; 0x3da <malloc+0x98>
 38c:	00 93 0c 01 	sts	0x010C, r16	; 0x80010c <__flp>
 390:	10 93 0d 01 	sts	0x010D, r17	; 0x80010d <__flp+0x1>
 394:	22 c0       	rjmp	.+68     	; 0x3da <malloc+0x98>
 396:	21 15       	cp	r18, r1
 398:	31 05       	cpc	r19, r1
 39a:	19 f0       	breq	.+6      	; 0x3a2 <malloc+0x60>
 39c:	42 17       	cp	r20, r18
 39e:	53 07       	cpc	r21, r19
 3a0:	18 f4       	brcc	.+6      	; 0x3a8 <malloc+0x66>
 3a2:	9a 01       	movw	r18, r20
 3a4:	bd 01       	movw	r22, r26
 3a6:	ef 01       	movw	r28, r30
 3a8:	df 01       	movw	r26, r30
 3aa:	f8 01       	movw	r30, r16
 3ac:	db cf       	rjmp	.-74     	; 0x364 <malloc+0x22>
 3ae:	21 15       	cp	r18, r1
 3b0:	31 05       	cpc	r19, r1
 3b2:	f9 f0       	breq	.+62     	; 0x3f2 <malloc+0xb0>
 3b4:	28 1b       	sub	r18, r24
 3b6:	39 0b       	sbc	r19, r25
 3b8:	24 30       	cpi	r18, 0x04	; 4
 3ba:	31 05       	cpc	r19, r1
 3bc:	80 f4       	brcc	.+32     	; 0x3de <malloc+0x9c>
 3be:	8a 81       	ldd	r24, Y+2	; 0x02
 3c0:	9b 81       	ldd	r25, Y+3	; 0x03
 3c2:	61 15       	cp	r22, r1
 3c4:	71 05       	cpc	r23, r1
 3c6:	21 f0       	breq	.+8      	; 0x3d0 <malloc+0x8e>
 3c8:	fb 01       	movw	r30, r22
 3ca:	93 83       	std	Z+3, r25	; 0x03
 3cc:	82 83       	std	Z+2, r24	; 0x02
 3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <malloc+0x96>
 3d0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__flp+0x1>
 3d4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__flp>
 3d8:	fe 01       	movw	r30, r28
 3da:	32 96       	adiw	r30, 0x02	; 2
 3dc:	44 c0       	rjmp	.+136    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 3de:	fe 01       	movw	r30, r28
 3e0:	e2 0f       	add	r30, r18
 3e2:	f3 1f       	adc	r31, r19
 3e4:	81 93       	st	Z+, r24
 3e6:	91 93       	st	Z+, r25
 3e8:	22 50       	subi	r18, 0x02	; 2
 3ea:	31 09       	sbc	r19, r1
 3ec:	39 83       	std	Y+1, r19	; 0x01
 3ee:	28 83       	st	Y, r18
 3f0:	3a c0       	rjmp	.+116    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 3f2:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__brkval>
 3f6:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__brkval+0x1>
 3fa:	23 2b       	or	r18, r19
 3fc:	41 f4       	brne	.+16     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3fe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 402:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 406:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <__brkval+0x1>
 40a:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <__brkval>
 40e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 412:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 416:	21 15       	cp	r18, r1
 418:	31 05       	cpc	r19, r1
 41a:	41 f4       	brne	.+16     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 41c:	2d b7       	in	r18, 0x3d	; 61
 41e:	3e b7       	in	r19, 0x3e	; 62
 420:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 424:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 428:	24 1b       	sub	r18, r20
 42a:	35 0b       	sbc	r19, r21
 42c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__brkval>
 430:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__brkval+0x1>
 434:	e2 17       	cp	r30, r18
 436:	f3 07       	cpc	r31, r19
 438:	a0 f4       	brcc	.+40     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 43a:	2e 1b       	sub	r18, r30
 43c:	3f 0b       	sbc	r19, r31
 43e:	28 17       	cp	r18, r24
 440:	39 07       	cpc	r19, r25
 442:	78 f0       	brcs	.+30     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 444:	ac 01       	movw	r20, r24
 446:	4e 5f       	subi	r20, 0xFE	; 254
 448:	5f 4f       	sbci	r21, 0xFF	; 255
 44a:	24 17       	cp	r18, r20
 44c:	35 07       	cpc	r19, r21
 44e:	48 f0       	brcs	.+18     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 450:	4e 0f       	add	r20, r30
 452:	5f 1f       	adc	r21, r31
 454:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <__brkval+0x1>
 458:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <__brkval>
 45c:	81 93       	st	Z+, r24
 45e:	91 93       	st	Z+, r25
 460:	02 c0       	rjmp	.+4      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 462:	e0 e0       	ldi	r30, 0x00	; 0
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	cf 01       	movw	r24, r30
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	1f 91       	pop	r17
 46e:	0f 91       	pop	r16
 470:	08 95       	ret

00000472 <free>:
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	00 97       	sbiw	r24, 0x00	; 0
 478:	09 f4       	brne	.+2      	; 0x47c <free+0xa>
 47a:	81 c0       	rjmp	.+258    	; 0x57e <free+0x10c>
 47c:	fc 01       	movw	r30, r24
 47e:	32 97       	sbiw	r30, 0x02	; 2
 480:	13 82       	std	Z+3, r1	; 0x03
 482:	12 82       	std	Z+2, r1	; 0x02
 484:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__flp>
 488:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__flp+0x1>
 48c:	10 97       	sbiw	r26, 0x00	; 0
 48e:	81 f4       	brne	.+32     	; 0x4b0 <free+0x3e>
 490:	20 81       	ld	r18, Z
 492:	31 81       	ldd	r19, Z+1	; 0x01
 494:	82 0f       	add	r24, r18
 496:	93 1f       	adc	r25, r19
 498:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__brkval>
 49c:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__brkval+0x1>
 4a0:	28 17       	cp	r18, r24
 4a2:	39 07       	cpc	r19, r25
 4a4:	51 f5       	brne	.+84     	; 0x4fa <free+0x88>
 4a6:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <__brkval+0x1>
 4aa:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <__brkval>
 4ae:	67 c0       	rjmp	.+206    	; 0x57e <free+0x10c>
 4b0:	ed 01       	movw	r28, r26
 4b2:	20 e0       	ldi	r18, 0x00	; 0
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	ce 17       	cp	r28, r30
 4b8:	df 07       	cpc	r29, r31
 4ba:	40 f4       	brcc	.+16     	; 0x4cc <free+0x5a>
 4bc:	4a 81       	ldd	r20, Y+2	; 0x02
 4be:	5b 81       	ldd	r21, Y+3	; 0x03
 4c0:	9e 01       	movw	r18, r28
 4c2:	41 15       	cp	r20, r1
 4c4:	51 05       	cpc	r21, r1
 4c6:	f1 f0       	breq	.+60     	; 0x504 <free+0x92>
 4c8:	ea 01       	movw	r28, r20
 4ca:	f5 cf       	rjmp	.-22     	; 0x4b6 <free+0x44>
 4cc:	d3 83       	std	Z+3, r29	; 0x03
 4ce:	c2 83       	std	Z+2, r28	; 0x02
 4d0:	40 81       	ld	r20, Z
 4d2:	51 81       	ldd	r21, Z+1	; 0x01
 4d4:	84 0f       	add	r24, r20
 4d6:	95 1f       	adc	r25, r21
 4d8:	c8 17       	cp	r28, r24
 4da:	d9 07       	cpc	r29, r25
 4dc:	59 f4       	brne	.+22     	; 0x4f4 <free+0x82>
 4de:	88 81       	ld	r24, Y
 4e0:	99 81       	ldd	r25, Y+1	; 0x01
 4e2:	84 0f       	add	r24, r20
 4e4:	95 1f       	adc	r25, r21
 4e6:	02 96       	adiw	r24, 0x02	; 2
 4e8:	91 83       	std	Z+1, r25	; 0x01
 4ea:	80 83       	st	Z, r24
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	9b 81       	ldd	r25, Y+3	; 0x03
 4f0:	93 83       	std	Z+3, r25	; 0x03
 4f2:	82 83       	std	Z+2, r24	; 0x02
 4f4:	21 15       	cp	r18, r1
 4f6:	31 05       	cpc	r19, r1
 4f8:	29 f4       	brne	.+10     	; 0x504 <free+0x92>
 4fa:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <__flp+0x1>
 4fe:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <__flp>
 502:	3d c0       	rjmp	.+122    	; 0x57e <free+0x10c>
 504:	e9 01       	movw	r28, r18
 506:	fb 83       	std	Y+3, r31	; 0x03
 508:	ea 83       	std	Y+2, r30	; 0x02
 50a:	49 91       	ld	r20, Y+
 50c:	59 91       	ld	r21, Y+
 50e:	c4 0f       	add	r28, r20
 510:	d5 1f       	adc	r29, r21
 512:	ec 17       	cp	r30, r28
 514:	fd 07       	cpc	r31, r29
 516:	61 f4       	brne	.+24     	; 0x530 <free+0xbe>
 518:	80 81       	ld	r24, Z
 51a:	91 81       	ldd	r25, Z+1	; 0x01
 51c:	84 0f       	add	r24, r20
 51e:	95 1f       	adc	r25, r21
 520:	02 96       	adiw	r24, 0x02	; 2
 522:	e9 01       	movw	r28, r18
 524:	99 83       	std	Y+1, r25	; 0x01
 526:	88 83       	st	Y, r24
 528:	82 81       	ldd	r24, Z+2	; 0x02
 52a:	93 81       	ldd	r25, Z+3	; 0x03
 52c:	9b 83       	std	Y+3, r25	; 0x03
 52e:	8a 83       	std	Y+2, r24	; 0x02
 530:	e0 e0       	ldi	r30, 0x00	; 0
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	12 96       	adiw	r26, 0x02	; 2
 536:	8d 91       	ld	r24, X+
 538:	9c 91       	ld	r25, X
 53a:	13 97       	sbiw	r26, 0x03	; 3
 53c:	00 97       	sbiw	r24, 0x00	; 0
 53e:	19 f0       	breq	.+6      	; 0x546 <free+0xd4>
 540:	fd 01       	movw	r30, r26
 542:	dc 01       	movw	r26, r24
 544:	f7 cf       	rjmp	.-18     	; 0x534 <free+0xc2>
 546:	8d 91       	ld	r24, X+
 548:	9c 91       	ld	r25, X
 54a:	11 97       	sbiw	r26, 0x01	; 1
 54c:	9d 01       	movw	r18, r26
 54e:	2e 5f       	subi	r18, 0xFE	; 254
 550:	3f 4f       	sbci	r19, 0xFF	; 255
 552:	82 0f       	add	r24, r18
 554:	93 1f       	adc	r25, r19
 556:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__brkval>
 55a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__brkval+0x1>
 55e:	28 17       	cp	r18, r24
 560:	39 07       	cpc	r19, r25
 562:	69 f4       	brne	.+26     	; 0x57e <free+0x10c>
 564:	30 97       	sbiw	r30, 0x00	; 0
 566:	29 f4       	brne	.+10     	; 0x572 <free+0x100>
 568:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__flp+0x1>
 56c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__flp>
 570:	02 c0       	rjmp	.+4      	; 0x576 <free+0x104>
 572:	13 82       	std	Z+3, r1	; 0x03
 574:	12 82       	std	Z+2, r1	; 0x02
 576:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <__brkval+0x1>
 57a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <__brkval>
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	08 95       	ret

00000584 <_exit>:
 584:	f8 94       	cli

00000586 <__stop_program>:
 586:	ff cf       	rjmp	.-2      	; 0x586 <__stop_program>

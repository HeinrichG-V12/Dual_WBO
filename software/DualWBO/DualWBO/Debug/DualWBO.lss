
DualWBO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000286  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ba3  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001046  00000000  00000000  00001f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000072a  00000000  00000000  00002fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  00003710  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009e1  00000000  00000000  00003924  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007bc  00000000  00000000  00004305  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00004ac1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	4f c0       	rjmp	.+158    	; 0xa4 <__bad_interrupt>
   6:	00 00       	nop
   8:	4d c0       	rjmp	.+154    	; 0xa4 <__bad_interrupt>
   a:	00 00       	nop
   c:	4b c0       	rjmp	.+150    	; 0xa4 <__bad_interrupt>
   e:	00 00       	nop
  10:	49 c0       	rjmp	.+146    	; 0xa4 <__bad_interrupt>
  12:	00 00       	nop
  14:	47 c0       	rjmp	.+142    	; 0xa4 <__bad_interrupt>
  16:	00 00       	nop
  18:	45 c0       	rjmp	.+138    	; 0xa4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	43 c0       	rjmp	.+134    	; 0xa4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	41 c0       	rjmp	.+130    	; 0xa4 <__bad_interrupt>
  22:	00 00       	nop
  24:	3f c0       	rjmp	.+126    	; 0xa4 <__bad_interrupt>
  26:	00 00       	nop
  28:	3d c0       	rjmp	.+122    	; 0xa4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3b c0       	rjmp	.+118    	; 0xa4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	39 c0       	rjmp	.+114    	; 0xa4 <__bad_interrupt>
  32:	00 00       	nop
  34:	37 c0       	rjmp	.+110    	; 0xa4 <__bad_interrupt>
  36:	00 00       	nop
  38:	35 c0       	rjmp	.+106    	; 0xa4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	33 c0       	rjmp	.+102    	; 0xa4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	31 c0       	rjmp	.+98     	; 0xa4 <__bad_interrupt>
  42:	00 00       	nop
  44:	2f c0       	rjmp	.+94     	; 0xa4 <__bad_interrupt>
  46:	00 00       	nop
  48:	2d c0       	rjmp	.+90     	; 0xa4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2b c0       	rjmp	.+86     	; 0xa4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	29 c0       	rjmp	.+82     	; 0xa4 <__bad_interrupt>
  52:	00 00       	nop
  54:	27 c0       	rjmp	.+78     	; 0xa4 <__bad_interrupt>
  56:	00 00       	nop
  58:	25 c0       	rjmp	.+74     	; 0xa4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	23 c0       	rjmp	.+70     	; 0xa4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	21 c0       	rjmp	.+66     	; 0xa4 <__bad_interrupt>
  62:	00 00       	nop
  64:	1f c0       	rjmp	.+62     	; 0xa4 <__bad_interrupt>
  66:	00 00       	nop
  68:	1d c0       	rjmp	.+58     	; 0xa4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1b c0       	rjmp	.+54     	; 0xa4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	19 c0       	rjmp	.+50     	; 0xa4 <__bad_interrupt>
  72:	00 00       	nop
  74:	17 c0       	rjmp	.+46     	; 0xa4 <__bad_interrupt>
  76:	00 00       	nop
  78:	15 c0       	rjmp	.+42     	; 0xa4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	13 c0       	rjmp	.+38     	; 0xa4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	11 c0       	rjmp	.+34     	; 0xa4 <__bad_interrupt>
  82:	00 00       	nop
  84:	0f c0       	rjmp	.+30     	; 0xa4 <__bad_interrupt>
  86:	00 00       	nop
  88:	0d c0       	rjmp	.+26     	; 0xa4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	0b c0       	rjmp	.+22     	; 0xa4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	09 c0       	rjmp	.+18     	; 0xa4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	5c d0       	rcall	.+184    	; 0x15a <main>
  a2:	ef c0       	rjmp	.+478    	; 0x282 <_exit>

000000a4 <__bad_interrupt>:
  a4:	ad cf       	rjmp	.-166    	; 0x0 <__vectors>

000000a6 <_ZN6HeaterC1Ev>:
 */ 

#include "heater.h"
#include "../helpers.h"

Heater::Heater ()
  a6:	6f 92       	push	r6
  a8:	7f 92       	push	r7
  aa:	8f 92       	push	r8
  ac:	9f 92       	push	r9
  ae:	af 92       	push	r10
  b0:	bf 92       	push	r11
  b2:	cf 92       	push	r12
  b4:	df 92       	push	r13
  b6:	ef 92       	push	r14
  b8:	ff 92       	push	r15
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	68 97       	sbiw	r28, 0x18	; 24
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
  d2:	02 96       	adiw	r24, 0x02	; 2
  d4:	3c 01       	movw	r6, r24
  d6:	0f 2e       	mov	r0, r31
  d8:	f0 ef       	ldi	r31, 0xF0	; 240
  da:	8f 2e       	mov	r8, r31
  dc:	91 2c       	mov	r9, r1
  de:	f0 2d       	mov	r31, r0
  e0:	a1 2c       	mov	r10, r1
  e2:	b1 2c       	mov	r11, r1
  e4:	0f 2e       	mov	r0, r31
  e6:	fd ec       	ldi	r31, 0xCD	; 205
  e8:	cf 2e       	mov	r12, r31
  ea:	fc ec       	ldi	r31, 0xCC	; 204
  ec:	df 2e       	mov	r13, r31
  ee:	fc e4       	ldi	r31, 0x4C	; 76
  f0:	ef 2e       	mov	r14, r31
  f2:	f0 e4       	ldi	r31, 0x40	; 64
  f4:	ff 2e       	mov	r15, r31
  f6:	f0 2d       	mov	r31, r0
  f8:	0d ec       	ldi	r16, 0xCD	; 205
  fa:	1c ec       	ldi	r17, 0xCC	; 204
  fc:	2c e4       	ldi	r18, 0x4C	; 76
  fe:	3f e3       	ldi	r19, 0x3F	; 63
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	60 ea       	ldi	r22, 0xA0	; 160
 106:	70 e4       	ldi	r23, 0x40	; 64
 108:	37 d0       	rcall	.+110    	; 0x178 <_ZN3PIDC1Efffii>
{
	
	this->pid = PID();
 10a:	0d ec       	ldi	r16, 0xCD	; 205
 10c:	1c ec       	ldi	r17, 0xCC	; 204
 10e:	2c e4       	ldi	r18, 0x4C	; 76
 110:	3f e3       	ldi	r19, 0x3F	; 63
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	60 ea       	ldi	r22, 0xA0	; 160
 118:	70 e4       	ldi	r23, 0x40	; 64
 11a:	ce 01       	movw	r24, r28
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	2c d0       	rcall	.+88     	; 0x178 <_ZN3PIDC1Efffii>
 120:	88 e1       	ldi	r24, 0x18	; 24
 122:	fe 01       	movw	r30, r28
 124:	31 96       	adiw	r30, 0x01	; 1
 126:	d3 01       	movw	r26, r6
 128:	01 90       	ld	r0, Z+
 12a:	0d 92       	st	X+, r0
 12c:	8a 95       	dec	r24
 12e:	e1 f7       	brne	.-8      	; 0x128 <_ZN6HeaterC1Ev+0x82>
}
 130:	68 96       	adiw	r28, 0x18	; 24
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	ff 90       	pop	r15
 146:	ef 90       	pop	r14
 148:	df 90       	pop	r13
 14a:	cf 90       	pop	r12
 14c:	bf 90       	pop	r11
 14e:	af 90       	pop	r10
 150:	9f 90       	pop	r9
 152:	8f 90       	pop	r8
 154:	7f 90       	pop	r7
 156:	6f 90       	pop	r6
 158:	08 95       	ret

0000015a <main>:

#include "sensor/sensor.h"


int main(void)
{
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	e8 97       	sbiw	r28, 0x38	; 56
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	f8 94       	cli
 168:	de bf       	out	0x3e, r29	; 62
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	cd bf       	out	0x3d, r28	; 61
	Sensor sensor1 = Sensor();
 16e:	68 e0       	ldi	r22, 0x08	; 8
 170:	ce 01       	movw	r24, r28
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	2d d0       	rcall	.+90     	; 0x1d0 <_ZN6SensorC1Eh>
 176:	ff cf       	rjmp	.-2      	; 0x176 <main+0x1c>

00000178 <_ZN3PIDC1Efffii>:
 *  Author: Heinrich
 */ 

#include "pid.h"

PID::PID(float pGain, float iGain, float dGain, int16_t pwmMin, int16_t pwmMax)
 178:	8f 92       	push	r8
 17a:	9f 92       	push	r9
 17c:	af 92       	push	r10
 17e:	bf 92       	push	r11
 180:	cf 92       	push	r12
 182:	df 92       	push	r13
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	fc 01       	movw	r30, r24
{
	this->pGain = pGain;
 196:	40 83       	st	Z, r20
 198:	51 83       	std	Z+1, r21	; 0x01
 19a:	62 83       	std	Z+2, r22	; 0x02
 19c:	73 83       	std	Z+3, r23	; 0x03
	this->iGain = iGain;
 19e:	04 83       	std	Z+4, r16	; 0x04
 1a0:	15 83       	std	Z+5, r17	; 0x05
 1a2:	26 83       	std	Z+6, r18	; 0x06
 1a4:	37 83       	std	Z+7, r19	; 0x07
	this->dGain = dGain;
 1a6:	c0 86       	std	Z+8, r12	; 0x08
 1a8:	d1 86       	std	Z+9, r13	; 0x09
 1aa:	e2 86       	std	Z+10, r14	; 0x0a
 1ac:	f3 86       	std	Z+11, r15	; 0x0b
	this->pwmMin = pwmMin;
 1ae:	b5 8a       	std	Z+21, r11	; 0x15
 1b0:	a4 8a       	std	Z+20, r10	; 0x14
	this->pwmMax = pwmMax;
 1b2:	97 8a       	std	Z+23, r9	; 0x17
 1b4:	86 8a       	std	Z+22, r8	; 0x16
}
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	ff 90       	pop	r15
 1c0:	ef 90       	pop	r14
 1c2:	df 90       	pop	r13
 1c4:	cf 90       	pop	r12
 1c6:	bf 90       	pop	r11
 1c8:	af 90       	pop	r10
 1ca:	9f 90       	pop	r9
 1cc:	8f 90       	pop	r8
 1ce:	08 95       	ret

000001d0 <_ZN6SensorC1Eh>:
 *  Author: Heinrich
 */ 

#include "sensor.h"

Sensor::Sensor (uint8_t amplificationFactor)
 1d0:	df 92       	push	r13
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	6a 97       	sbiw	r28, 0x1a	; 26
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
 1ee:	8c 01       	movw	r16, r24
 1f0:	d6 2e       	mov	r13, r22
 1f2:	fc 01       	movw	r30, r24
 1f4:	10 82       	st	Z, r1
 1f6:	8c ec       	ldi	r24, 0xCC	; 204
 1f8:	91 ef       	ldi	r25, 0xF1	; 241
 1fa:	92 83       	std	Z+2, r25	; 0x02
 1fc:	81 83       	std	Z+1, r24	; 0x01
 1fe:	88 e0       	ldi	r24, 0x08	; 8
 200:	83 83       	std	Z+3, r24	; 0x03
 202:	15 82       	std	Z+5, r1	; 0x05
 204:	14 82       	std	Z+4, r1	; 0x04
 206:	17 82       	std	Z+7, r1	; 0x07
 208:	16 82       	std	Z+6, r1	; 0x06
 20a:	11 86       	std	Z+9, r1	; 0x09
 20c:	10 86       	std	Z+8, r1	; 0x08
 20e:	13 86       	std	Z+11, r1	; 0x0b
 210:	12 86       	std	Z+10, r1	; 0x0a
 212:	15 86       	std	Z+13, r1	; 0x0d
 214:	14 86       	std	Z+12, r1	; 0x0c
 216:	17 86       	std	Z+15, r1	; 0x0f
 218:	16 86       	std	Z+14, r1	; 0x0e
 21a:	11 8a       	std	Z+17, r1	; 0x11
 21c:	10 8a       	std	Z+16, r1	; 0x10
 21e:	13 8a       	std	Z+19, r1	; 0x13
 220:	12 8a       	std	Z+18, r1	; 0x12
 222:	15 8a       	std	Z+21, r1	; 0x15
 224:	14 8a       	std	Z+20, r1	; 0x14
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	86 8b       	std	Z+22, r24	; 0x16
 22a:	17 8a       	std	Z+23, r1	; 0x17
 22c:	78 01       	movw	r14, r16
 22e:	fe e1       	ldi	r31, 0x1E	; 30
 230:	ef 0e       	add	r14, r31
 232:	f1 1c       	adc	r15, r1
 234:	c7 01       	movw	r24, r14
 236:	37 df       	rcall	.-402    	; 0xa6 <_ZN6HeaterC1Ev>
{
	this->Amplification = amplificationFactor;
 238:	f8 01       	movw	r30, r16
 23a:	d3 82       	std	Z+3, r13	; 0x03
	this->sensorStatus = SensorStatus::ERROR;
 23c:	84 e1       	ldi	r24, 0x14	; 20
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	91 8f       	std	Z+25, r25	; 0x19
 242:	80 8f       	std	Z+24, r24	; 0x18
	this->sensorFaultState = SensorFaultState::OK;
 244:	15 8e       	std	Z+29, r1	; 0x1d
 246:	14 8e       	std	Z+28, r1	; 0x1c
	this->sensorDetectedStatus = SensorDetectedStatus::BOSCH_LSU49;
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	93 8f       	std	Z+27, r25	; 0x1b
 24e:	82 8f       	std	Z+26, r24	; 0x1a
	this->heater = Heater();
 250:	ce 01       	movw	r24, r28
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	28 df       	rcall	.-432    	; 0xa6 <_ZN6HeaterC1Ev>
 256:	8a e1       	ldi	r24, 0x1A	; 26
 258:	fe 01       	movw	r30, r28
 25a:	31 96       	adiw	r30, 0x01	; 1
 25c:	d7 01       	movw	r26, r14
 25e:	01 90       	ld	r0, Z+
 260:	0d 92       	st	X+, r0
 262:	8a 95       	dec	r24
 264:	e1 f7       	brne	.-8      	; 0x25e <_ZN6SensorC1Eh+0x8e>
}
 266:	6a 96       	adiw	r28, 0x1a	; 26
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	f8 94       	cli
 26c:	de bf       	out	0x3e, r29	; 62
 26e:	0f be       	out	0x3f, r0	; 63
 270:	cd bf       	out	0x3d, r28	; 61
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	df 90       	pop	r13
 280:	08 95       	ret

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>

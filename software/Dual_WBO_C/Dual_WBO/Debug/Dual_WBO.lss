
Dual_WBO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000dcc  00000e80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dcc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000102  00800106  00800106  00000e86  2**0
                  ALLOC
  3 .eeprom       0000004d  00810000  00810000  00000e86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000ed3  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f04  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000f0  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000017c2  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f39  00000000  00000000  000027f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f59  00000000  00000000  0000372f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001ec  00000000  00000000  00004688  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000009ae  00000000  00000000  00004874  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a00  00000000  00000000  00005222  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c0  00000000  00000000  00005c22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
   2:	00 00       	nop
   4:	6f c0       	rjmp	.+222    	; 0xe4 <__bad_interrupt>
   6:	00 00       	nop
   8:	6d c0       	rjmp	.+218    	; 0xe4 <__bad_interrupt>
   a:	00 00       	nop
   c:	6b c0       	rjmp	.+214    	; 0xe4 <__bad_interrupt>
   e:	00 00       	nop
  10:	69 c0       	rjmp	.+210    	; 0xe4 <__bad_interrupt>
  12:	00 00       	nop
  14:	67 c0       	rjmp	.+206    	; 0xe4 <__bad_interrupt>
  16:	00 00       	nop
  18:	65 c0       	rjmp	.+202    	; 0xe4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	63 c0       	rjmp	.+198    	; 0xe4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	61 c0       	rjmp	.+194    	; 0xe4 <__bad_interrupt>
  22:	00 00       	nop
  24:	5f c0       	rjmp	.+190    	; 0xe4 <__bad_interrupt>
  26:	00 00       	nop
  28:	5d c0       	rjmp	.+186    	; 0xe4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5b c0       	rjmp	.+182    	; 0xe4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	59 c0       	rjmp	.+178    	; 0xe4 <__bad_interrupt>
  32:	00 00       	nop
  34:	57 c0       	rjmp	.+174    	; 0xe4 <__bad_interrupt>
  36:	00 00       	nop
  38:	55 c0       	rjmp	.+170    	; 0xe4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	53 c0       	rjmp	.+166    	; 0xe4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	51 c0       	rjmp	.+162    	; 0xe4 <__bad_interrupt>
  42:	00 00       	nop
  44:	4f c0       	rjmp	.+158    	; 0xe4 <__bad_interrupt>
  46:	00 00       	nop
  48:	4d c0       	rjmp	.+154    	; 0xe4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4b c0       	rjmp	.+150    	; 0xe4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	49 c0       	rjmp	.+146    	; 0xe4 <__bad_interrupt>
  52:	00 00       	nop
  54:	47 c0       	rjmp	.+142    	; 0xe4 <__bad_interrupt>
  56:	00 00       	nop
  58:	45 c0       	rjmp	.+138    	; 0xe4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	43 c0       	rjmp	.+134    	; 0xe4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	41 c0       	rjmp	.+130    	; 0xe4 <__bad_interrupt>
  62:	00 00       	nop
  64:	3f c0       	rjmp	.+126    	; 0xe4 <__bad_interrupt>
  66:	00 00       	nop
  68:	3d c0       	rjmp	.+122    	; 0xe4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3b c0       	rjmp	.+118    	; 0xe4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	39 c0       	rjmp	.+114    	; 0xe4 <__bad_interrupt>
  72:	00 00       	nop
  74:	37 c0       	rjmp	.+110    	; 0xe4 <__bad_interrupt>
  76:	00 00       	nop
  78:	35 c0       	rjmp	.+106    	; 0xe4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	33 c0       	rjmp	.+102    	; 0xe4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	76 c6       	rjmp	.+3308   	; 0xd6e <__vector_32>
  82:	00 00       	nop
  84:	2f c0       	rjmp	.+94     	; 0xe4 <__bad_interrupt>
  86:	00 00       	nop
  88:	2d c0       	rjmp	.+90     	; 0xe4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2b c0       	rjmp	.+86     	; 0xe4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	29 c0       	rjmp	.+82     	; 0xe4 <__bad_interrupt>
  92:	00 00       	nop
  94:	1f 01       	movw	r2, r30
  96:	96 01       	movw	r18, r12
  98:	05 02       	muls	r16, r21
  9a:	66 02       	muls	r22, r22
  9c:	a1 02       	muls	r26, r17
  9e:	e6 02       	muls	r30, r22
  a0:	2f 03       	fmul	r18, r23
  a2:	b5 03       	fmuls	r19, r21
  a4:	45 04       	cpc	r4, r5
  a6:	e5 04       	cpc	r14, r5
  a8:	33 05       	cpc	r19, r3

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d0 e1       	ldi	r29, 0x10	; 16
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	11 e0       	ldi	r17, 0x01	; 1
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	ec ec       	ldi	r30, 0xCC	; 204
  be:	fd e0       	ldi	r31, 0x0D	; 13
  c0:	00 e0       	ldi	r16, 0x00	; 0
  c2:	0b bf       	out	0x3b, r16	; 59
  c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a6 30       	cpi	r26, 0x06	; 6
  cc:	b1 07       	cpc	r27, r17
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
  d0:	22 e0       	ldi	r18, 0x02	; 2
  d2:	a6 e0       	ldi	r26, 0x06	; 6
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
  d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
  da:	a8 30       	cpi	r26, 0x08	; 8
  dc:	b2 07       	cpc	r27, r18
  de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
  e0:	16 d6       	rcall	.+3116   	; 0xd0e <main>
  e2:	72 c6       	rjmp	.+3300   	; 0xdc8 <_exit>

000000e4 <__bad_interrupt>:
  e4:	8d cf       	rjmp	.-230    	; 0x0 <__vectors>

000000e6 <can_clear_all_mob>:
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0d c0       	rjmp	.+26     	; 0x104 <can_clear_all_mob+0x1e>
  ea:	98 2f       	mov	r25, r24
  ec:	92 95       	swap	r25
  ee:	90 7f       	andi	r25, 0xF0	; 240
  f0:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
  f4:	ee ee       	ldi	r30, 0xEE	; 238
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	01 c0       	rjmp	.+2      	; 0xfc <can_clear_all_mob+0x16>
  fa:	11 92       	st	Z+, r1
  fc:	e8 3f       	cpi	r30, 0xF8	; 248
  fe:	f1 05       	cpc	r31, r1
 100:	e0 f3       	brcs	.-8      	; 0xfa <can_clear_all_mob+0x14>
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	8f 30       	cpi	r24, 0x0F	; 15
 106:	88 f3       	brcs	.-30     	; 0xea <can_clear_all_mob+0x4>
 108:	08 95       	ret

0000010a <can_get_mob_free>:
 10a:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0d c0       	rjmp	.+26     	; 0x12c <can_get_mob_free+0x22>
 112:	98 2f       	mov	r25, r24
 114:	92 95       	swap	r25
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 11c:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 120:	90 7c       	andi	r25, 0xC0	; 192
 122:	19 f4       	brne	.+6      	; 0x12a <can_get_mob_free+0x20>
 124:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 128:	08 95       	ret
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	8f 30       	cpi	r24, 0x0F	; 15
 12e:	88 f3       	brcs	.-30     	; 0x112 <can_get_mob_free+0x8>
 130:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	08 95       	ret

00000138 <can_get_mob_status>:
 138:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 13c:	80 7c       	andi	r24, 0xC0	; 192
 13e:	69 f0       	breq	.+26     	; 0x15a <can_get_mob_status+0x22>
 140:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 144:	89 2f       	mov	r24, r25
 146:	80 7e       	andi	r24, 0xE0	; 224
 148:	80 32       	cpi	r24, 0x20	; 32
 14a:	41 f0       	breq	.+16     	; 0x15c <can_get_mob_status+0x24>
 14c:	80 34       	cpi	r24, 0x40	; 64
 14e:	31 f0       	breq	.+12     	; 0x15c <can_get_mob_status+0x24>
 150:	80 3a       	cpi	r24, 0xA0	; 160
 152:	21 f0       	breq	.+8      	; 0x15c <can_get_mob_status+0x24>
 154:	89 2f       	mov	r24, r25
 156:	8f 71       	andi	r24, 0x1F	; 31
 158:	08 95       	ret
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	08 95       	ret

0000015e <can_get_data>:
 15e:	bc 01       	movw	r22, r24
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	07 c0       	rjmp	.+14     	; 0x172 <can_get_data+0x14>
 164:	fb 01       	movw	r30, r22
 166:	e9 0f       	add	r30, r25
 168:	f1 1d       	adc	r31, r1
 16a:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 16e:	20 83       	st	Z, r18
 170:	9f 5f       	subi	r25, 0xFF	; 255
 172:	49 2f       	mov	r20, r25
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 17a:	2f 70       	andi	r18, 0x0F	; 15
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	42 17       	cp	r20, r18
 180:	53 07       	cpc	r21, r19
 182:	84 f3       	brlt	.-32     	; 0x164 <can_get_data+0x6>
 184:	08 95       	ret

00000186 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    Can_conf_bt();
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 192:	84 e0       	ldi	r24, 0x04	; 4
 194:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 198:	83 e1       	ldi	r24, 0x13	; 19
 19a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    return 1;
}
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	08 95       	ret

000001a2 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
 1a2:	f1 df       	rcall	.-30     	; 0x186 <can_fixed_baudrate>
 1a4:	88 23       	and	r24, r24
 1a6:	39 f0       	breq	.+14     	; 0x1b6 <can_init+0x14>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
 1a8:	9e df       	rcall	.-196    	; 0xe6 <can_clear_all_mob>
 1aa:	e8 ed       	ldi	r30, 0xD8	; 216
    Can_enable();                               // c.f. macro in "can_drv.h" 
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	80 83       	st	Z, r24
 1b4:	81 e0       	ldi	r24, 0x01	; 1
    return (1);
 1b6:	08 95       	ret

000001b8 <can_cmd>:
}
 1b8:	0f 93       	push	r16
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <can_cmd+0xa>
 1c2:	00 d0       	rcall	.+0      	; 0x1c4 <can_cmd+0xc>
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	fc 01       	movw	r30, r24
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
 1ca:	81 81       	ldd	r24, Z+1	; 0x01
 1cc:	8c 30       	cpi	r24, 0x0C	; 12
 1ce:	99 f4       	brne	.+38     	; 0x1f6 <can_cmd+0x3e>
  {
    if (cmd->status == MOB_PENDING)
 1d0:	81 85       	ldd	r24, Z+9	; 0x09
 1d2:	80 36       	cpi	r24, 0x60	; 96
 1d4:	69 f4       	brne	.+26     	; 0x1f0 <can_cmd+0x38>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
 1d6:	80 81       	ld	r24, Z
 1d8:	82 95       	swap	r24
 1da:	80 7f       	andi	r24, 0xF0	; 240
 1dc:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
      Can_mob_abort();
 1e0:	af ee       	ldi	r26, 0xEF	; 239
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	8c 91       	ld	r24, X
 1e6:	8f 73       	andi	r24, 0x3F	; 63
 1e8:	8c 93       	st	X, r24
      Can_clear_status_mob();       // To be sure !
 1ea:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
      cmd->handle = 0;
 1ee:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
 1f0:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	e6 c4       	rjmp	.+2508   	; 0xbc2 <__LOCK_REGION_LENGTH__+0x7c2>
 1f6:	8f 01       	movw	r16, r30
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
    mob_handle = can_get_mob_free();
 1f8:	88 df       	rcall	.-240    	; 0x10a <can_get_mob_free>
    if (mob_handle!= NO_MOB)
 1fa:	8f 3f       	cpi	r24, 0xFF	; 255
 1fc:	09 f4       	brne	.+2      	; 0x200 <can_cmd+0x48>
 1fe:	dc c4       	rjmp	.+2488   	; 0xbb8 <__LOCK_REGION_LENGTH__+0x7b8>
    {
      cmd->status = MOB_PENDING; 
 200:	90 e6       	ldi	r25, 0x60	; 96
 202:	d8 01       	movw	r26, r16
 204:	19 96       	adiw	r26, 0x09	; 9
 206:	9c 93       	st	X, r25
 208:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_handle;
 20a:	8c 93       	st	X, r24
      Can_set_mob(mob_handle);
 20c:	82 95       	swap	r24
 20e:	80 7f       	andi	r24, 0xF0	; 240
 210:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
      Can_clear_mob();
 214:	ee ee       	ldi	r30, 0xEE	; 238
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	01 c0       	rjmp	.+2      	; 0x21c <can_cmd+0x64>
 21a:	11 92       	st	Z+, r1
 21c:	e8 3f       	cpi	r30, 0xF8	; 248
 21e:	f1 05       	cpc	r31, r1
 220:	e0 f3       	brcs	.-8      	; 0x21a <can_cmd+0x62>
          
      switch (cmd->cmd)
 222:	d8 01       	movw	r26, r16
 224:	11 96       	adiw	r26, 0x01	; 1
 226:	ec 91       	ld	r30, X
 228:	8e 2f       	mov	r24, r30
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	fc 01       	movw	r30, r24
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	eb 30       	cpi	r30, 0x0B	; 11
 232:	f1 05       	cpc	r31, r1
 234:	08 f0       	brcs	.+2      	; 0x238 <can_cmd+0x80>
 236:	bc c4       	rjmp	.+2424   	; 0xbb0 <__LOCK_REGION_LENGTH__+0x7b0>
 238:	e6 5b       	subi	r30, 0xB6	; 182
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	bc c5       	rjmp	.+2936   	; 0xdb6 <__tablejump2__>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 23e:	f8 01       	movw	r30, r16
 240:	83 85       	ldd	r24, Z+11	; 0x0b
 242:	88 23       	and	r24, r24
 244:	71 f1       	breq	.+92     	; 0x2a2 <can_cmd+0xea>
 246:	95 81       	ldd	r25, Z+5	; 0x05
 248:	84 81       	ldd	r24, Z+4	; 0x04
 24a:	99 0f       	add	r25, r25
 24c:	99 0f       	add	r25, r25
 24e:	99 0f       	add	r25, r25
 250:	82 95       	swap	r24
 252:	86 95       	lsr	r24
 254:	87 70       	andi	r24, 0x07	; 7
 256:	89 0f       	add	r24, r25
 258:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 25c:	94 81       	ldd	r25, Z+4	; 0x04
 25e:	83 81       	ldd	r24, Z+3	; 0x03
 260:	99 0f       	add	r25, r25
 262:	99 0f       	add	r25, r25
 264:	99 0f       	add	r25, r25
 266:	82 95       	swap	r24
 268:	86 95       	lsr	r24
 26a:	87 70       	andi	r24, 0x07	; 7
 26c:	89 0f       	add	r24, r25
 26e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 272:	93 81       	ldd	r25, Z+3	; 0x03
 274:	82 81       	ldd	r24, Z+2	; 0x02
 276:	99 0f       	add	r25, r25
 278:	99 0f       	add	r25, r25
 27a:	99 0f       	add	r25, r25
 27c:	82 95       	swap	r24
 27e:	86 95       	lsr	r24
 280:	87 70       	andi	r24, 0x07	; 7
 282:	89 0f       	add	r24, r25
 284:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 288:	82 81       	ldd	r24, Z+2	; 0x02
 28a:	88 0f       	add	r24, r24
 28c:	88 0f       	add	r24, r24
 28e:	88 0f       	add	r24, r24
 290:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 294:	ef ee       	ldi	r30, 0xEF	; 239
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	80 61       	ori	r24, 0x10	; 16
 29c:	80 83       	st	Z, r24
    if (mob_handle!= NO_MOB)
    {
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	23 c0       	rjmp	.+70     	; 0x2e8 <can_cmd+0x130>
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
 2a2:	93 81       	ldd	r25, Z+3	; 0x03
 2a4:	82 81       	ldd	r24, Z+2	; 0x02
 2a6:	86 95       	lsr	r24
 2a8:	86 95       	lsr	r24
 2aa:	86 95       	lsr	r24
 2ac:	b0 e2       	ldi	r27, 0x20	; 32
 2ae:	9b 9f       	mul	r25, r27
 2b0:	80 0d       	add	r24, r0
 2b2:	11 24       	eor	r1, r1
 2b4:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 2b8:	f8 01       	movw	r30, r16
 2ba:	82 81       	ldd	r24, Z+2	; 0x02
 2bc:	82 95       	swap	r24
 2be:	88 0f       	add	r24, r24
 2c0:	80 7e       	andi	r24, 0xE0	; 224
 2c2:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 2c6:	ef ee       	ldi	r30, 0xEF	; 239
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	8f 7e       	andi	r24, 0xEF	; 239
 2ce:	80 83       	st	Z, r24
 2d0:	e6 cf       	rjmp	.-52     	; 0x29e <can_cmd+0xe6>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 2d2:	d8 01       	movw	r26, r16
 2d4:	17 96       	adiw	r26, 0x07	; 7
 2d6:	ed 91       	ld	r30, X+
 2d8:	fc 91       	ld	r31, X
 2da:	18 97       	sbiw	r26, 0x08	; 8
 2dc:	e8 0f       	add	r30, r24
 2de:	f1 1d       	adc	r31, r1
 2e0:	90 81       	ld	r25, Z
 2e2:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 2e6:	8f 5f       	subi	r24, 0xFF	; 255
 2e8:	f8 01       	movw	r30, r16
 2ea:	96 81       	ldd	r25, Z+6	; 0x06
 2ec:	89 17       	cp	r24, r25
 2ee:	88 f3       	brcs	.-30     	; 0x2d2 <can_cmd+0x11a>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
 2f0:	82 85       	ldd	r24, Z+10	; 0x0a
 2f2:	88 23       	and	r24, r24
 2f4:	31 f0       	breq	.+12     	; 0x302 <can_cmd+0x14a>
 2f6:	e0 ef       	ldi	r30, 0xF0	; 240
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	84 60       	ori	r24, 0x04	; 4
 2fe:	80 83       	st	Z, r24
 300:	05 c0       	rjmp	.+10     	; 0x30c <can_cmd+0x154>
            else Can_clear_rtr();    
 302:	e0 ef       	ldi	r30, 0xF0	; 240
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	8b 7f       	andi	r24, 0xFB	; 251
 30a:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 30c:	ef ee       	ldi	r30, 0xEF	; 239
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	90 81       	ld	r25, Z
 312:	d8 01       	movw	r26, r16
 314:	16 96       	adiw	r26, 0x06	; 6
 316:	8c 91       	ld	r24, X
 318:	89 2b       	or	r24, r25
 31a:	80 83       	st	Z, r24
          Can_config_tx();
 31c:	80 81       	ld	r24, Z
 31e:	8f 73       	andi	r24, 0x3F	; 63
 320:	80 83       	st	Z, r24
 322:	80 81       	ld	r24, Z
 324:	80 64       	ori	r24, 0x40	; 64
 326:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 328:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 32a:	4b c4       	rjmp	.+2198   	; 0xbc2 <__LOCK_REGION_LENGTH__+0x7c2>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 32c:	f8 01       	movw	r30, r16
 32e:	83 85       	ldd	r24, Z+11	; 0x0b
 330:	88 23       	and	r24, r24
 332:	71 f1       	breq	.+92     	; 0x390 <can_cmd+0x1d8>
 334:	95 81       	ldd	r25, Z+5	; 0x05
 336:	84 81       	ldd	r24, Z+4	; 0x04
 338:	99 0f       	add	r25, r25
 33a:	99 0f       	add	r25, r25
 33c:	99 0f       	add	r25, r25
 33e:	82 95       	swap	r24
 340:	86 95       	lsr	r24
 342:	87 70       	andi	r24, 0x07	; 7
 344:	89 0f       	add	r24, r25
 346:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 34a:	94 81       	ldd	r25, Z+4	; 0x04
 34c:	83 81       	ldd	r24, Z+3	; 0x03
 34e:	99 0f       	add	r25, r25
 350:	99 0f       	add	r25, r25
 352:	99 0f       	add	r25, r25
 354:	82 95       	swap	r24
 356:	86 95       	lsr	r24
 358:	87 70       	andi	r24, 0x07	; 7
 35a:	89 0f       	add	r24, r25
 35c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 360:	93 81       	ldd	r25, Z+3	; 0x03
 362:	82 81       	ldd	r24, Z+2	; 0x02
 364:	99 0f       	add	r25, r25
 366:	99 0f       	add	r25, r25
 368:	99 0f       	add	r25, r25
 36a:	82 95       	swap	r24
 36c:	86 95       	lsr	r24
 36e:	87 70       	andi	r24, 0x07	; 7
 370:	89 0f       	add	r24, r25
 372:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 376:	82 81       	ldd	r24, Z+2	; 0x02
 378:	88 0f       	add	r24, r24
 37a:	88 0f       	add	r24, r24
 37c:	88 0f       	add	r24, r24
 37e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 382:	ef ee       	ldi	r30, 0xEF	; 239
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	80 61       	ori	r24, 0x10	; 16
 38a:	80 83       	st	Z, r24
    if (mob_handle!= NO_MOB)
    {
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	23 c0       	rjmp	.+70     	; 0x3d6 <can_cmd+0x21e>
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
 390:	93 81       	ldd	r25, Z+3	; 0x03
 392:	82 81       	ldd	r24, Z+2	; 0x02
 394:	86 95       	lsr	r24
 396:	86 95       	lsr	r24
 398:	86 95       	lsr	r24
 39a:	b0 e2       	ldi	r27, 0x20	; 32
 39c:	9b 9f       	mul	r25, r27
 39e:	80 0d       	add	r24, r0
 3a0:	11 24       	eor	r1, r1
 3a2:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 3a6:	f8 01       	movw	r30, r16
 3a8:	82 81       	ldd	r24, Z+2	; 0x02
 3aa:	82 95       	swap	r24
 3ac:	88 0f       	add	r24, r24
 3ae:	80 7e       	andi	r24, 0xE0	; 224
 3b0:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 3b4:	ef ee       	ldi	r30, 0xEF	; 239
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	8f 7e       	andi	r24, 0xEF	; 239
 3bc:	80 83       	st	Z, r24
 3be:	e6 cf       	rjmp	.-52     	; 0x38c <can_cmd+0x1d4>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 3c0:	d8 01       	movw	r26, r16
 3c2:	17 96       	adiw	r26, 0x07	; 7
 3c4:	ed 91       	ld	r30, X+
 3c6:	fc 91       	ld	r31, X
 3c8:	18 97       	sbiw	r26, 0x08	; 8
 3ca:	e8 0f       	add	r30, r24
 3cc:	f1 1d       	adc	r31, r1
 3ce:	90 81       	ld	r25, Z
 3d0:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 3d4:	8f 5f       	subi	r24, 0xFF	; 255
 3d6:	f8 01       	movw	r30, r16
 3d8:	96 81       	ldd	r25, Z+6	; 0x06
 3da:	89 17       	cp	r24, r25
 3dc:	88 f3       	brcs	.-30     	; 0x3c0 <can_cmd+0x208>
          cmd->ctrl.rtr=0; Can_clear_rtr();
 3de:	12 86       	std	Z+10, r1	; 0x0a
 3e0:	e0 ef       	ldi	r30, 0xF0	; 240
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	8b 7f       	andi	r24, 0xFB	; 251
 3e8:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 3ea:	ef ee       	ldi	r30, 0xEF	; 239
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	90 81       	ld	r25, Z
 3f0:	d8 01       	movw	r26, r16
 3f2:	16 96       	adiw	r26, 0x06	; 6
 3f4:	8c 91       	ld	r24, X
 3f6:	89 2b       	or	r24, r25
 3f8:	80 83       	st	Z, r24
          Can_config_tx();
 3fa:	80 81       	ld	r24, Z
 3fc:	8f 73       	andi	r24, 0x3F	; 63
 3fe:	80 83       	st	Z, r24
 400:	80 81       	ld	r24, Z
 402:	80 64       	ori	r24, 0x40	; 64
 404:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 406:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 408:	dc c3       	rjmp	.+1976   	; 0xbc2 <__LOCK_REGION_LENGTH__+0x7c2>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 40a:	f8 01       	movw	r30, r16
 40c:	83 85       	ldd	r24, Z+11	; 0x0b
 40e:	88 23       	and	r24, r24
 410:	69 f1       	breq	.+90     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 412:	95 81       	ldd	r25, Z+5	; 0x05
 414:	84 81       	ldd	r24, Z+4	; 0x04
 416:	99 0f       	add	r25, r25
 418:	99 0f       	add	r25, r25
 41a:	99 0f       	add	r25, r25
 41c:	82 95       	swap	r24
 41e:	86 95       	lsr	r24
 420:	87 70       	andi	r24, 0x07	; 7
 422:	89 0f       	add	r24, r25
 424:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 428:	94 81       	ldd	r25, Z+4	; 0x04
 42a:	83 81       	ldd	r24, Z+3	; 0x03
 42c:	99 0f       	add	r25, r25
 42e:	99 0f       	add	r25, r25
 430:	99 0f       	add	r25, r25
 432:	82 95       	swap	r24
 434:	86 95       	lsr	r24
 436:	87 70       	andi	r24, 0x07	; 7
 438:	89 0f       	add	r24, r25
 43a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 43e:	93 81       	ldd	r25, Z+3	; 0x03
 440:	82 81       	ldd	r24, Z+2	; 0x02
 442:	99 0f       	add	r25, r25
 444:	99 0f       	add	r25, r25
 446:	99 0f       	add	r25, r25
 448:	82 95       	swap	r24
 44a:	86 95       	lsr	r24
 44c:	87 70       	andi	r24, 0x07	; 7
 44e:	89 0f       	add	r24, r25
 450:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 454:	82 81       	ldd	r24, Z+2	; 0x02
 456:	88 0f       	add	r24, r24
 458:	88 0f       	add	r24, r24
 45a:	88 0f       	add	r24, r24
 45c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 460:	ef ee       	ldi	r30, 0xEF	; 239
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	80 61       	ori	r24, 0x10	; 16
 468:	80 83       	st	Z, r24
 46a:	17 c0       	rjmp	.+46     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
          else              { Can_set_std_id(cmd->id.std);}
 46c:	93 81       	ldd	r25, Z+3	; 0x03
 46e:	82 81       	ldd	r24, Z+2	; 0x02
 470:	86 95       	lsr	r24
 472:	86 95       	lsr	r24
 474:	86 95       	lsr	r24
 476:	b0 e2       	ldi	r27, 0x20	; 32
 478:	9b 9f       	mul	r25, r27
 47a:	80 0d       	add	r24, r0
 47c:	11 24       	eor	r1, r1
 47e:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 482:	f8 01       	movw	r30, r16
 484:	82 81       	ldd	r24, Z+2	; 0x02
 486:	82 95       	swap	r24
 488:	88 0f       	add	r24, r24
 48a:	80 7e       	andi	r24, 0xE0	; 224
 48c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 490:	ef ee       	ldi	r30, 0xEF	; 239
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	8f 7e       	andi	r24, 0xEF	; 239
 498:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	d8 01       	movw	r26, r16
 49e:	1a 96       	adiw	r26, 0x0a	; 10
 4a0:	8c 93       	st	X, r24
 4a2:	1a 97       	sbiw	r26, 0x0a	; 10
 4a4:	e0 ef       	ldi	r30, 0xF0	; 240
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	84 60       	ori	r24, 0x04	; 4
 4ac:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 4ae:	ef ee       	ldi	r30, 0xEF	; 239
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	90 81       	ld	r25, Z
 4b4:	16 96       	adiw	r26, 0x06	; 6
 4b6:	8c 91       	ld	r24, X
 4b8:	89 2b       	or	r24, r25
 4ba:	80 83       	st	Z, r24
          Can_config_tx();
 4bc:	80 81       	ld	r24, Z
 4be:	8f 73       	andi	r24, 0x3F	; 63
 4c0:	80 83       	st	Z, r24
 4c2:	80 81       	ld	r24, Z
 4c4:	80 64       	ori	r24, 0x40	; 64
 4c6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 4c8:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 4ca:	7b c3       	rjmp	.+1782   	; 0xbc2 <__LOCK_REGION_LENGTH__+0x7c2>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 4cc:	19 82       	std	Y+1, r1	; 0x01
 4ce:	1a 82       	std	Y+2, r1	; 0x02
 4d0:	1b 82       	std	Y+3, r1	; 0x03
 4d2:	1c 82       	std	Y+4, r1	; 0x04
 4d4:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 4d8:	9b 81       	ldd	r25, Y+3	; 0x03
 4da:	8a 81       	ldd	r24, Y+2	; 0x02
 4dc:	99 0f       	add	r25, r25
 4de:	99 0f       	add	r25, r25
 4e0:	99 0f       	add	r25, r25
 4e2:	82 95       	swap	r24
 4e4:	86 95       	lsr	r24
 4e6:	87 70       	andi	r24, 0x07	; 7
 4e8:	89 0f       	add	r24, r25
 4ea:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 4ee:	9a 81       	ldd	r25, Y+2	; 0x02
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	99 0f       	add	r25, r25
 4f4:	99 0f       	add	r25, r25
 4f6:	99 0f       	add	r25, r25
 4f8:	82 95       	swap	r24
 4fa:	86 95       	lsr	r24
 4fc:	87 70       	andi	r24, 0x07	; 7
 4fe:	89 0f       	add	r24, r25
 500:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 504:	89 81       	ldd	r24, Y+1	; 0x01
 506:	88 0f       	add	r24, r24
 508:	88 0f       	add	r24, r24
 50a:	88 0f       	add	r24, r24
 50c:	24 ef       	ldi	r18, 0xF4	; 244
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	f9 01       	movw	r30, r18
 512:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 514:	ef ee       	ldi	r30, 0xEF	; 239
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	90 81       	ld	r25, Z
 51a:	d8 01       	movw	r26, r16
 51c:	16 96       	adiw	r26, 0x06	; 6
 51e:	8c 91       	ld	r24, X
 520:	89 2b       	or	r24, r25
 522:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
 524:	d9 01       	movw	r26, r18
 526:	8c 91       	ld	r24, X
 528:	8b 7f       	andi	r24, 0xFB	; 251
 52a:	8c 93       	st	X, r24
          Can_clear_idemsk();
 52c:	8c 91       	ld	r24, X
 52e:	8e 7f       	andi	r24, 0xFE	; 254
 530:	8c 93       	st	X, r24
          Can_config_rx();       
 532:	80 81       	ld	r24, Z
 534:	8f 73       	andi	r24, 0x3F	; 63
 536:	80 83       	st	Z, r24
 538:	80 81       	ld	r24, Z
 53a:	80 68       	ori	r24, 0x80	; 128
 53c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 53e:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 540:	40 c3       	rjmp	.+1664   	; 0xbc2 <__LOCK_REGION_LENGTH__+0x7c2>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 542:	19 82       	std	Y+1, r1	; 0x01
 544:	1a 82       	std	Y+2, r1	; 0x02
 546:	1b 82       	std	Y+3, r1	; 0x03
 548:	1c 82       	std	Y+4, r1	; 0x04
 54a:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 54e:	9b 81       	ldd	r25, Y+3	; 0x03
 550:	8a 81       	ldd	r24, Y+2	; 0x02
 552:	99 0f       	add	r25, r25
 554:	99 0f       	add	r25, r25
 556:	99 0f       	add	r25, r25
 558:	82 95       	swap	r24
 55a:	86 95       	lsr	r24
 55c:	87 70       	andi	r24, 0x07	; 7
 55e:	89 0f       	add	r24, r25
 560:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 564:	9a 81       	ldd	r25, Y+2	; 0x02
 566:	89 81       	ldd	r24, Y+1	; 0x01
 568:	99 0f       	add	r25, r25
 56a:	99 0f       	add	r25, r25
 56c:	99 0f       	add	r25, r25
 56e:	82 95       	swap	r24
 570:	86 95       	lsr	r24
 572:	87 70       	andi	r24, 0x07	; 7
 574:	89 0f       	add	r24, r25
 576:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 57a:	89 81       	ldd	r24, Y+1	; 0x01
 57c:	88 0f       	add	r24, r24
 57e:	88 0f       	add	r24, r24
 580:	88 0f       	add	r24, r24
 582:	44 ef       	ldi	r20, 0xF4	; 244
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	fa 01       	movw	r30, r20
 588:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 58a:	ef ee       	ldi	r30, 0xEF	; 239
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	90 81       	ld	r25, Z
 590:	d8 01       	movw	r26, r16
 592:	16 96       	adiw	r26, 0x06	; 6
 594:	8c 91       	ld	r24, X
 596:	16 97       	sbiw	r26, 0x06	; 6
 598:	89 2b       	or	r24, r25
 59a:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
 59c:	1a 96       	adiw	r26, 0x0a	; 10
 59e:	1c 92       	st	X, r1
 5a0:	da 01       	movw	r26, r20
 5a2:	8c 91       	ld	r24, X
 5a4:	84 60       	ori	r24, 0x04	; 4
 5a6:	8c 93       	st	X, r24
 5a8:	20 ef       	ldi	r18, 0xF0	; 240
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	d9 01       	movw	r26, r18
 5ae:	8c 91       	ld	r24, X
 5b0:	8b 7f       	andi	r24, 0xFB	; 251
 5b2:	8c 93       	st	X, r24
          Can_clear_idemsk();
 5b4:	da 01       	movw	r26, r20
 5b6:	8c 91       	ld	r24, X
 5b8:	8e 7f       	andi	r24, 0xFE	; 254
 5ba:	8c 93       	st	X, r24
          Can_config_rx();       
 5bc:	80 81       	ld	r24, Z
 5be:	8f 73       	andi	r24, 0x3F	; 63
 5c0:	80 83       	st	Z, r24
 5c2:	80 81       	ld	r24, Z
 5c4:	80 68       	ori	r24, 0x80	; 128
 5c6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 5c8:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 5ca:	fb c2       	rjmp	.+1526   	; 0xbc2 <__LOCK_REGION_LENGTH__+0x7c2>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 5cc:	19 82       	std	Y+1, r1	; 0x01
 5ce:	1a 82       	std	Y+2, r1	; 0x02
 5d0:	1b 82       	std	Y+3, r1	; 0x03
 5d2:	1c 82       	std	Y+4, r1	; 0x04
 5d4:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 5d8:	9b 81       	ldd	r25, Y+3	; 0x03
 5da:	8a 81       	ldd	r24, Y+2	; 0x02
 5dc:	99 0f       	add	r25, r25
 5de:	99 0f       	add	r25, r25
 5e0:	99 0f       	add	r25, r25
 5e2:	82 95       	swap	r24
 5e4:	86 95       	lsr	r24
 5e6:	87 70       	andi	r24, 0x07	; 7
 5e8:	89 0f       	add	r24, r25
 5ea:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 5ee:	9a 81       	ldd	r25, Y+2	; 0x02
 5f0:	89 81       	ldd	r24, Y+1	; 0x01
 5f2:	99 0f       	add	r25, r25
 5f4:	99 0f       	add	r25, r25
 5f6:	99 0f       	add	r25, r25
 5f8:	82 95       	swap	r24
 5fa:	86 95       	lsr	r24
 5fc:	87 70       	andi	r24, 0x07	; 7
 5fe:	89 0f       	add	r24, r25
 600:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 604:	89 81       	ldd	r24, Y+1	; 0x01
 606:	88 0f       	add	r24, r24
 608:	88 0f       	add	r24, r24
 60a:	88 0f       	add	r24, r24
 60c:	44 ef       	ldi	r20, 0xF4	; 244
 60e:	50 e0       	ldi	r21, 0x00	; 0
 610:	fa 01       	movw	r30, r20
 612:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 614:	ef ee       	ldi	r30, 0xEF	; 239
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	90 81       	ld	r25, Z
 61a:	d8 01       	movw	r26, r16
 61c:	16 96       	adiw	r26, 0x06	; 6
 61e:	8c 91       	ld	r24, X
 620:	16 97       	sbiw	r26, 0x06	; 6
 622:	89 2b       	or	r24, r25
 624:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	1a 96       	adiw	r26, 0x0a	; 10
 62a:	8c 93       	st	X, r24
 62c:	da 01       	movw	r26, r20
 62e:	8c 91       	ld	r24, X
 630:	84 60       	ori	r24, 0x04	; 4
 632:	8c 93       	st	X, r24
 634:	20 ef       	ldi	r18, 0xF0	; 240
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	d9 01       	movw	r26, r18
 63a:	8c 91       	ld	r24, X
 63c:	84 60       	ori	r24, 0x04	; 4
 63e:	8c 93       	st	X, r24
          Can_clear_rplv();
 640:	80 81       	ld	r24, Z
 642:	8f 7d       	andi	r24, 0xDF	; 223
 644:	80 83       	st	Z, r24
          Can_clear_idemsk();
 646:	da 01       	movw	r26, r20
 648:	8c 91       	ld	r24, X
 64a:	8e 7f       	andi	r24, 0xFE	; 254
 64c:	8c 93       	st	X, r24
          Can_config_rx();       
 64e:	80 81       	ld	r24, Z
 650:	8f 73       	andi	r24, 0x3F	; 63
 652:	80 83       	st	Z, r24
 654:	80 81       	ld	r24, Z
 656:	80 68       	ori	r24, 0x80	; 128
 658:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 65a:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 65c:	b2 c2       	rjmp	.+1380   	; 0xbc2 <__LOCK_REGION_LENGTH__+0x7c2>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 65e:	f8 01       	movw	r30, r16
 660:	83 85       	ldd	r24, Z+11	; 0x0b
 662:	88 23       	and	r24, r24
 664:	69 f1       	breq	.+90     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 666:	95 81       	ldd	r25, Z+5	; 0x05
 668:	84 81       	ldd	r24, Z+4	; 0x04
 66a:	99 0f       	add	r25, r25
 66c:	99 0f       	add	r25, r25
 66e:	99 0f       	add	r25, r25
 670:	82 95       	swap	r24
 672:	86 95       	lsr	r24
 674:	87 70       	andi	r24, 0x07	; 7
 676:	89 0f       	add	r24, r25
 678:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 67c:	94 81       	ldd	r25, Z+4	; 0x04
 67e:	83 81       	ldd	r24, Z+3	; 0x03
 680:	99 0f       	add	r25, r25
 682:	99 0f       	add	r25, r25
 684:	99 0f       	add	r25, r25
 686:	82 95       	swap	r24
 688:	86 95       	lsr	r24
 68a:	87 70       	andi	r24, 0x07	; 7
 68c:	89 0f       	add	r24, r25
 68e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 692:	93 81       	ldd	r25, Z+3	; 0x03
 694:	82 81       	ldd	r24, Z+2	; 0x02
 696:	99 0f       	add	r25, r25
 698:	99 0f       	add	r25, r25
 69a:	99 0f       	add	r25, r25
 69c:	82 95       	swap	r24
 69e:	86 95       	lsr	r24
 6a0:	87 70       	andi	r24, 0x07	; 7
 6a2:	89 0f       	add	r24, r25
 6a4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 6a8:	82 81       	ldd	r24, Z+2	; 0x02
 6aa:	88 0f       	add	r24, r24
 6ac:	88 0f       	add	r24, r24
 6ae:	88 0f       	add	r24, r24
 6b0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 6b4:	ef ee       	ldi	r30, 0xEF	; 239
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 81       	ld	r24, Z
 6ba:	80 61       	ori	r24, 0x10	; 16
 6bc:	80 83       	st	Z, r24
 6be:	17 c0       	rjmp	.+46     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
          else              { Can_set_std_id(cmd->id.std);}
 6c0:	93 81       	ldd	r25, Z+3	; 0x03
 6c2:	82 81       	ldd	r24, Z+2	; 0x02
 6c4:	86 95       	lsr	r24
 6c6:	86 95       	lsr	r24
 6c8:	86 95       	lsr	r24
 6ca:	b0 e2       	ldi	r27, 0x20	; 32
 6cc:	9b 9f       	mul	r25, r27
 6ce:	80 0d       	add	r24, r0
 6d0:	11 24       	eor	r1, r1
 6d2:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 6d6:	f8 01       	movw	r30, r16
 6d8:	82 81       	ldd	r24, Z+2	; 0x02
 6da:	82 95       	swap	r24
 6dc:	88 0f       	add	r24, r24
 6de:	80 7e       	andi	r24, 0xE0	; 224
 6e0:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 6e4:	ef ee       	ldi	r30, 0xEF	; 239
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	80 81       	ld	r24, Z
 6ea:	8f 7e       	andi	r24, 0xEF	; 239
 6ec:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 6ee:	8f ef       	ldi	r24, 0xFF	; 255
 6f0:	9f ef       	ldi	r25, 0xFF	; 255
 6f2:	dc 01       	movw	r26, r24
 6f4:	89 83       	std	Y+1, r24	; 0x01
 6f6:	9a 83       	std	Y+2, r25	; 0x02
 6f8:	ab 83       	std	Y+3, r26	; 0x03
 6fa:	bc 83       	std	Y+4, r27	; 0x04
 6fc:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 700:	9b 81       	ldd	r25, Y+3	; 0x03
 702:	8a 81       	ldd	r24, Y+2	; 0x02
 704:	99 0f       	add	r25, r25
 706:	99 0f       	add	r25, r25
 708:	99 0f       	add	r25, r25
 70a:	82 95       	swap	r24
 70c:	86 95       	lsr	r24
 70e:	87 70       	andi	r24, 0x07	; 7
 710:	89 0f       	add	r24, r25
 712:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 716:	9a 81       	ldd	r25, Y+2	; 0x02
 718:	89 81       	ldd	r24, Y+1	; 0x01
 71a:	99 0f       	add	r25, r25
 71c:	99 0f       	add	r25, r25
 71e:	99 0f       	add	r25, r25
 720:	82 95       	swap	r24
 722:	86 95       	lsr	r24
 724:	87 70       	andi	r24, 0x07	; 7
 726:	89 0f       	add	r24, r25
 728:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 72c:	89 81       	ldd	r24, Y+1	; 0x01
 72e:	88 0f       	add	r24, r24
 730:	88 0f       	add	r24, r24
 732:	88 0f       	add	r24, r24
 734:	24 ef       	ldi	r18, 0xF4	; 244
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	d9 01       	movw	r26, r18
 73a:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 73c:	ef ee       	ldi	r30, 0xEF	; 239
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	90 81       	ld	r25, Z
 742:	d8 01       	movw	r26, r16
 744:	16 96       	adiw	r26, 0x06	; 6
 746:	8c 91       	ld	r24, X
 748:	89 2b       	or	r24, r25
 74a:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
 74c:	d9 01       	movw	r26, r18
 74e:	8c 91       	ld	r24, X
 750:	8b 7f       	andi	r24, 0xFB	; 251
 752:	8c 93       	st	X, r24
          Can_set_idemsk();
 754:	8c 91       	ld	r24, X
 756:	81 60       	ori	r24, 0x01	; 1
 758:	8c 93       	st	X, r24
          Can_config_rx();       
 75a:	80 81       	ld	r24, Z
 75c:	8f 73       	andi	r24, 0x3F	; 63
 75e:	80 83       	st	Z, r24
 760:	80 81       	ld	r24, Z
 762:	80 68       	ori	r24, 0x80	; 128
 764:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 766:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 768:	2c c2       	rjmp	.+1112   	; 0xbc2 <__LOCK_REGION_LENGTH__+0x7c2>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 76a:	f8 01       	movw	r30, r16
 76c:	83 85       	ldd	r24, Z+11	; 0x0b
 76e:	88 23       	and	r24, r24
 770:	69 f1       	breq	.+90     	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 772:	95 81       	ldd	r25, Z+5	; 0x05
 774:	84 81       	ldd	r24, Z+4	; 0x04
 776:	99 0f       	add	r25, r25
 778:	99 0f       	add	r25, r25
 77a:	99 0f       	add	r25, r25
 77c:	82 95       	swap	r24
 77e:	86 95       	lsr	r24
 780:	87 70       	andi	r24, 0x07	; 7
 782:	89 0f       	add	r24, r25
 784:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 788:	94 81       	ldd	r25, Z+4	; 0x04
 78a:	83 81       	ldd	r24, Z+3	; 0x03
 78c:	99 0f       	add	r25, r25
 78e:	99 0f       	add	r25, r25
 790:	99 0f       	add	r25, r25
 792:	82 95       	swap	r24
 794:	86 95       	lsr	r24
 796:	87 70       	andi	r24, 0x07	; 7
 798:	89 0f       	add	r24, r25
 79a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 79e:	93 81       	ldd	r25, Z+3	; 0x03
 7a0:	82 81       	ldd	r24, Z+2	; 0x02
 7a2:	99 0f       	add	r25, r25
 7a4:	99 0f       	add	r25, r25
 7a6:	99 0f       	add	r25, r25
 7a8:	82 95       	swap	r24
 7aa:	86 95       	lsr	r24
 7ac:	87 70       	andi	r24, 0x07	; 7
 7ae:	89 0f       	add	r24, r25
 7b0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 7b4:	82 81       	ldd	r24, Z+2	; 0x02
 7b6:	88 0f       	add	r24, r24
 7b8:	88 0f       	add	r24, r24
 7ba:	88 0f       	add	r24, r24
 7bc:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 7c0:	ef ee       	ldi	r30, 0xEF	; 239
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	80 81       	ld	r24, Z
 7c6:	80 61       	ori	r24, 0x10	; 16
 7c8:	80 83       	st	Z, r24
 7ca:	17 c0       	rjmp	.+46     	; 0x7fa <__LOCK_REGION_LENGTH__+0x3fa>
          else              { Can_set_std_id(cmd->id.std);}
 7cc:	93 81       	ldd	r25, Z+3	; 0x03
 7ce:	82 81       	ldd	r24, Z+2	; 0x02
 7d0:	86 95       	lsr	r24
 7d2:	86 95       	lsr	r24
 7d4:	86 95       	lsr	r24
 7d6:	b0 e2       	ldi	r27, 0x20	; 32
 7d8:	9b 9f       	mul	r25, r27
 7da:	80 0d       	add	r24, r0
 7dc:	11 24       	eor	r1, r1
 7de:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 7e2:	f8 01       	movw	r30, r16
 7e4:	82 81       	ldd	r24, Z+2	; 0x02
 7e6:	82 95       	swap	r24
 7e8:	88 0f       	add	r24, r24
 7ea:	80 7e       	andi	r24, 0xE0	; 224
 7ec:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 7f0:	ef ee       	ldi	r30, 0xEF	; 239
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	8f 7e       	andi	r24, 0xEF	; 239
 7f8:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 7fa:	8f ef       	ldi	r24, 0xFF	; 255
 7fc:	9f ef       	ldi	r25, 0xFF	; 255
 7fe:	dc 01       	movw	r26, r24
 800:	89 83       	std	Y+1, r24	; 0x01
 802:	9a 83       	std	Y+2, r25	; 0x02
 804:	ab 83       	std	Y+3, r26	; 0x03
 806:	bc 83       	std	Y+4, r27	; 0x04
 808:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 80c:	9b 81       	ldd	r25, Y+3	; 0x03
 80e:	8a 81       	ldd	r24, Y+2	; 0x02
 810:	99 0f       	add	r25, r25
 812:	99 0f       	add	r25, r25
 814:	99 0f       	add	r25, r25
 816:	82 95       	swap	r24
 818:	86 95       	lsr	r24
 81a:	87 70       	andi	r24, 0x07	; 7
 81c:	89 0f       	add	r24, r25
 81e:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 822:	9a 81       	ldd	r25, Y+2	; 0x02
 824:	89 81       	ldd	r24, Y+1	; 0x01
 826:	99 0f       	add	r25, r25
 828:	99 0f       	add	r25, r25
 82a:	99 0f       	add	r25, r25
 82c:	82 95       	swap	r24
 82e:	86 95       	lsr	r24
 830:	87 70       	andi	r24, 0x07	; 7
 832:	89 0f       	add	r24, r25
 834:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 838:	89 81       	ldd	r24, Y+1	; 0x01
 83a:	88 0f       	add	r24, r24
 83c:	88 0f       	add	r24, r24
 83e:	88 0f       	add	r24, r24
 840:	44 ef       	ldi	r20, 0xF4	; 244
 842:	50 e0       	ldi	r21, 0x00	; 0
 844:	da 01       	movw	r26, r20
 846:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 848:	ef ee       	ldi	r30, 0xEF	; 239
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	90 81       	ld	r25, Z
 84e:	d8 01       	movw	r26, r16
 850:	16 96       	adiw	r26, 0x06	; 6
 852:	8c 91       	ld	r24, X
 854:	16 97       	sbiw	r26, 0x06	; 6
 856:	89 2b       	or	r24, r25
 858:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
 85a:	1a 96       	adiw	r26, 0x0a	; 10
 85c:	1c 92       	st	X, r1
 85e:	da 01       	movw	r26, r20
 860:	8c 91       	ld	r24, X
 862:	84 60       	ori	r24, 0x04	; 4
 864:	8c 93       	st	X, r24
 866:	20 ef       	ldi	r18, 0xF0	; 240
 868:	30 e0       	ldi	r19, 0x00	; 0
 86a:	d9 01       	movw	r26, r18
 86c:	8c 91       	ld	r24, X
 86e:	8b 7f       	andi	r24, 0xFB	; 251
 870:	8c 93       	st	X, r24
          Can_set_idemsk();
 872:	da 01       	movw	r26, r20
 874:	8c 91       	ld	r24, X
 876:	81 60       	ori	r24, 0x01	; 1
 878:	8c 93       	st	X, r24
          Can_config_rx();       
 87a:	80 81       	ld	r24, Z
 87c:	8f 73       	andi	r24, 0x3F	; 63
 87e:	80 83       	st	Z, r24
 880:	80 81       	ld	r24, Z
 882:	80 68       	ori	r24, 0x80	; 128
 884:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 886:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 888:	9c c1       	rjmp	.+824    	; 0xbc2 <__LOCK_REGION_LENGTH__+0x7c2>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 88a:	f8 01       	movw	r30, r16
 88c:	83 85       	ldd	r24, Z+11	; 0x0b
 88e:	88 23       	and	r24, r24
 890:	69 f1       	breq	.+90     	; 0x8ec <__LOCK_REGION_LENGTH__+0x4ec>
 892:	95 81       	ldd	r25, Z+5	; 0x05
 894:	84 81       	ldd	r24, Z+4	; 0x04
 896:	99 0f       	add	r25, r25
 898:	99 0f       	add	r25, r25
 89a:	99 0f       	add	r25, r25
 89c:	82 95       	swap	r24
 89e:	86 95       	lsr	r24
 8a0:	87 70       	andi	r24, 0x07	; 7
 8a2:	89 0f       	add	r24, r25
 8a4:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 8a8:	94 81       	ldd	r25, Z+4	; 0x04
 8aa:	83 81       	ldd	r24, Z+3	; 0x03
 8ac:	99 0f       	add	r25, r25
 8ae:	99 0f       	add	r25, r25
 8b0:	99 0f       	add	r25, r25
 8b2:	82 95       	swap	r24
 8b4:	86 95       	lsr	r24
 8b6:	87 70       	andi	r24, 0x07	; 7
 8b8:	89 0f       	add	r24, r25
 8ba:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 8be:	93 81       	ldd	r25, Z+3	; 0x03
 8c0:	82 81       	ldd	r24, Z+2	; 0x02
 8c2:	99 0f       	add	r25, r25
 8c4:	99 0f       	add	r25, r25
 8c6:	99 0f       	add	r25, r25
 8c8:	82 95       	swap	r24
 8ca:	86 95       	lsr	r24
 8cc:	87 70       	andi	r24, 0x07	; 7
 8ce:	89 0f       	add	r24, r25
 8d0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 8d4:	82 81       	ldd	r24, Z+2	; 0x02
 8d6:	88 0f       	add	r24, r24
 8d8:	88 0f       	add	r24, r24
 8da:	88 0f       	add	r24, r24
 8dc:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 8e0:	ef ee       	ldi	r30, 0xEF	; 239
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	80 81       	ld	r24, Z
 8e6:	80 61       	ori	r24, 0x10	; 16
 8e8:	80 83       	st	Z, r24
 8ea:	17 c0       	rjmp	.+46     	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
          else              { Can_set_std_id(cmd->id.std);}
 8ec:	93 81       	ldd	r25, Z+3	; 0x03
 8ee:	82 81       	ldd	r24, Z+2	; 0x02
 8f0:	86 95       	lsr	r24
 8f2:	86 95       	lsr	r24
 8f4:	86 95       	lsr	r24
 8f6:	b0 e2       	ldi	r27, 0x20	; 32
 8f8:	9b 9f       	mul	r25, r27
 8fa:	80 0d       	add	r24, r0
 8fc:	11 24       	eor	r1, r1
 8fe:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 902:	f8 01       	movw	r30, r16
 904:	82 81       	ldd	r24, Z+2	; 0x02
 906:	82 95       	swap	r24
 908:	88 0f       	add	r24, r24
 90a:	80 7e       	andi	r24, 0xE0	; 224
 90c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 910:	ef ee       	ldi	r30, 0xEF	; 239
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	8f 7e       	andi	r24, 0xEF	; 239
 918:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 91a:	8f ef       	ldi	r24, 0xFF	; 255
 91c:	9f ef       	ldi	r25, 0xFF	; 255
 91e:	dc 01       	movw	r26, r24
 920:	89 83       	std	Y+1, r24	; 0x01
 922:	9a 83       	std	Y+2, r25	; 0x02
 924:	ab 83       	std	Y+3, r26	; 0x03
 926:	bc 83       	std	Y+4, r27	; 0x04
 928:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 92c:	9b 81       	ldd	r25, Y+3	; 0x03
 92e:	8a 81       	ldd	r24, Y+2	; 0x02
 930:	99 0f       	add	r25, r25
 932:	99 0f       	add	r25, r25
 934:	99 0f       	add	r25, r25
 936:	82 95       	swap	r24
 938:	86 95       	lsr	r24
 93a:	87 70       	andi	r24, 0x07	; 7
 93c:	89 0f       	add	r24, r25
 93e:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 942:	9a 81       	ldd	r25, Y+2	; 0x02
 944:	89 81       	ldd	r24, Y+1	; 0x01
 946:	99 0f       	add	r25, r25
 948:	99 0f       	add	r25, r25
 94a:	99 0f       	add	r25, r25
 94c:	82 95       	swap	r24
 94e:	86 95       	lsr	r24
 950:	87 70       	andi	r24, 0x07	; 7
 952:	89 0f       	add	r24, r25
 954:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 958:	89 81       	ldd	r24, Y+1	; 0x01
 95a:	88 0f       	add	r24, r24
 95c:	88 0f       	add	r24, r24
 95e:	88 0f       	add	r24, r24
 960:	44 ef       	ldi	r20, 0xF4	; 244
 962:	50 e0       	ldi	r21, 0x00	; 0
 964:	da 01       	movw	r26, r20
 966:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 968:	ef ee       	ldi	r30, 0xEF	; 239
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	90 81       	ld	r25, Z
 96e:	d8 01       	movw	r26, r16
 970:	16 96       	adiw	r26, 0x06	; 6
 972:	8c 91       	ld	r24, X
 974:	16 97       	sbiw	r26, 0x06	; 6
 976:	89 2b       	or	r24, r25
 978:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 97a:	81 e0       	ldi	r24, 0x01	; 1
 97c:	1a 96       	adiw	r26, 0x0a	; 10
 97e:	8c 93       	st	X, r24
 980:	da 01       	movw	r26, r20
 982:	8c 91       	ld	r24, X
 984:	84 60       	ori	r24, 0x04	; 4
 986:	8c 93       	st	X, r24
 988:	20 ef       	ldi	r18, 0xF0	; 240
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	d9 01       	movw	r26, r18
 98e:	8c 91       	ld	r24, X
 990:	84 60       	ori	r24, 0x04	; 4
 992:	8c 93       	st	X, r24
          Can_clear_rplv();
 994:	80 81       	ld	r24, Z
 996:	8f 7d       	andi	r24, 0xDF	; 223
 998:	80 83       	st	Z, r24
          Can_set_idemsk();
 99a:	da 01       	movw	r26, r20
 99c:	8c 91       	ld	r24, X
 99e:	81 60       	ori	r24, 0x01	; 1
 9a0:	8c 93       	st	X, r24
          Can_config_rx();       
 9a2:	80 81       	ld	r24, Z
 9a4:	8f 73       	andi	r24, 0x3F	; 63
 9a6:	80 83       	st	Z, r24
 9a8:	80 81       	ld	r24, Z
 9aa:	80 68       	ori	r24, 0x80	; 128
 9ac:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 9ae:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 9b0:	08 c1       	rjmp	.+528    	; 0xbc2 <__LOCK_REGION_LENGTH__+0x7c2>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 9b2:	d8 01       	movw	r26, r16
 9b4:	17 96       	adiw	r26, 0x07	; 7
 9b6:	ed 91       	ld	r30, X+
 9b8:	fc 91       	ld	r31, X
 9ba:	18 97       	sbiw	r26, 0x08	; 8
 9bc:	e8 0f       	add	r30, r24
 9be:	f1 1d       	adc	r31, r1
 9c0:	90 81       	ld	r25, Z
 9c2:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 9c6:	8f 5f       	subi	r24, 0xFF	; 255
 9c8:	01 c0       	rjmp	.+2      	; 0x9cc <__LOCK_REGION_LENGTH__+0x5cc>
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
          
      switch (cmd->cmd)
 9ca:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 9cc:	f8 01       	movw	r30, r16
 9ce:	96 81       	ldd	r25, Z+6	; 0x06
 9d0:	89 17       	cp	r24, r25
 9d2:	78 f3       	brcs	.-34     	; 0x9b2 <__LOCK_REGION_LENGTH__+0x5b2>
          u32_temp=0; Can_set_ext_msk(u32_temp);
 9d4:	19 82       	std	Y+1, r1	; 0x01
 9d6:	1a 82       	std	Y+2, r1	; 0x02
 9d8:	1b 82       	std	Y+3, r1	; 0x03
 9da:	1c 82       	std	Y+4, r1	; 0x04
 9dc:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 9e0:	9b 81       	ldd	r25, Y+3	; 0x03
 9e2:	8a 81       	ldd	r24, Y+2	; 0x02
 9e4:	99 0f       	add	r25, r25
 9e6:	99 0f       	add	r25, r25
 9e8:	99 0f       	add	r25, r25
 9ea:	82 95       	swap	r24
 9ec:	86 95       	lsr	r24
 9ee:	87 70       	andi	r24, 0x07	; 7
 9f0:	89 0f       	add	r24, r25
 9f2:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 9f6:	9a 81       	ldd	r25, Y+2	; 0x02
 9f8:	89 81       	ldd	r24, Y+1	; 0x01
 9fa:	99 0f       	add	r25, r25
 9fc:	99 0f       	add	r25, r25
 9fe:	99 0f       	add	r25, r25
 a00:	82 95       	swap	r24
 a02:	86 95       	lsr	r24
 a04:	87 70       	andi	r24, 0x07	; 7
 a06:	89 0f       	add	r24, r25
 a08:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 a0c:	89 81       	ldd	r24, Y+1	; 0x01
 a0e:	88 0f       	add	r24, r24
 a10:	88 0f       	add	r24, r24
 a12:	88 0f       	add	r24, r24
 a14:	44 ef       	ldi	r20, 0xF4	; 244
 a16:	50 e0       	ldi	r21, 0x00	; 0
 a18:	da 01       	movw	r26, r20
 a1a:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 a1c:	ef ee       	ldi	r30, 0xEF	; 239
 a1e:	f0 e0       	ldi	r31, 0x00	; 0
 a20:	90 81       	ld	r25, Z
 a22:	d8 01       	movw	r26, r16
 a24:	16 96       	adiw	r26, 0x06	; 6
 a26:	8c 91       	ld	r24, X
 a28:	16 97       	sbiw	r26, 0x06	; 6
 a2a:	89 2b       	or	r24, r25
 a2c:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 a2e:	81 e0       	ldi	r24, 0x01	; 1
 a30:	1a 96       	adiw	r26, 0x0a	; 10
 a32:	8c 93       	st	X, r24
 a34:	da 01       	movw	r26, r20
 a36:	8c 91       	ld	r24, X
 a38:	84 60       	ori	r24, 0x04	; 4
 a3a:	8c 93       	st	X, r24
 a3c:	20 ef       	ldi	r18, 0xF0	; 240
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	d9 01       	movw	r26, r18
 a42:	8c 91       	ld	r24, X
 a44:	84 60       	ori	r24, 0x04	; 4
 a46:	8c 93       	st	X, r24
          Can_set_rplv();
 a48:	80 81       	ld	r24, Z
 a4a:	80 62       	ori	r24, 0x20	; 32
 a4c:	80 83       	st	Z, r24
          Can_clear_idemsk();
 a4e:	da 01       	movw	r26, r20
 a50:	8c 91       	ld	r24, X
 a52:	8e 7f       	andi	r24, 0xFE	; 254
 a54:	8c 93       	st	X, r24
          Can_config_rx();       
 a56:	80 81       	ld	r24, Z
 a58:	8f 73       	andi	r24, 0x3F	; 63
 a5a:	80 83       	st	Z, r24
 a5c:	80 81       	ld	r24, Z
 a5e:	80 68       	ori	r24, 0x80	; 128
 a60:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 a62:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 a64:	ae c0       	rjmp	.+348    	; 0xbc2 <__LOCK_REGION_LENGTH__+0x7c2>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 a66:	f8 01       	movw	r30, r16
 a68:	83 85       	ldd	r24, Z+11	; 0x0b
 a6a:	88 23       	and	r24, r24
 a6c:	71 f1       	breq	.+92     	; 0xaca <__LOCK_REGION_LENGTH__+0x6ca>
 a6e:	95 81       	ldd	r25, Z+5	; 0x05
 a70:	84 81       	ldd	r24, Z+4	; 0x04
 a72:	99 0f       	add	r25, r25
 a74:	99 0f       	add	r25, r25
 a76:	99 0f       	add	r25, r25
 a78:	82 95       	swap	r24
 a7a:	86 95       	lsr	r24
 a7c:	87 70       	andi	r24, 0x07	; 7
 a7e:	89 0f       	add	r24, r25
 a80:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 a84:	94 81       	ldd	r25, Z+4	; 0x04
 a86:	83 81       	ldd	r24, Z+3	; 0x03
 a88:	99 0f       	add	r25, r25
 a8a:	99 0f       	add	r25, r25
 a8c:	99 0f       	add	r25, r25
 a8e:	82 95       	swap	r24
 a90:	86 95       	lsr	r24
 a92:	87 70       	andi	r24, 0x07	; 7
 a94:	89 0f       	add	r24, r25
 a96:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 a9a:	93 81       	ldd	r25, Z+3	; 0x03
 a9c:	82 81       	ldd	r24, Z+2	; 0x02
 a9e:	99 0f       	add	r25, r25
 aa0:	99 0f       	add	r25, r25
 aa2:	99 0f       	add	r25, r25
 aa4:	82 95       	swap	r24
 aa6:	86 95       	lsr	r24
 aa8:	87 70       	andi	r24, 0x07	; 7
 aaa:	89 0f       	add	r24, r25
 aac:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 ab0:	82 81       	ldd	r24, Z+2	; 0x02
 ab2:	88 0f       	add	r24, r24
 ab4:	88 0f       	add	r24, r24
 ab6:	88 0f       	add	r24, r24
 ab8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 abc:	ef ee       	ldi	r30, 0xEF	; 239
 abe:	f0 e0       	ldi	r31, 0x00	; 0
 ac0:	80 81       	ld	r24, Z
 ac2:	80 61       	ori	r24, 0x10	; 16
 ac4:	80 83       	st	Z, r24
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
          
      switch (cmd->cmd)
 ac6:	80 e0       	ldi	r24, 0x00	; 0
 ac8:	23 c0       	rjmp	.+70     	; 0xb10 <__LOCK_REGION_LENGTH__+0x710>
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
 aca:	93 81       	ldd	r25, Z+3	; 0x03
 acc:	82 81       	ldd	r24, Z+2	; 0x02
 ace:	86 95       	lsr	r24
 ad0:	86 95       	lsr	r24
 ad2:	86 95       	lsr	r24
 ad4:	b0 e2       	ldi	r27, 0x20	; 32
 ad6:	9b 9f       	mul	r25, r27
 ad8:	80 0d       	add	r24, r0
 ada:	11 24       	eor	r1, r1
 adc:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 ae0:	f8 01       	movw	r30, r16
 ae2:	82 81       	ldd	r24, Z+2	; 0x02
 ae4:	82 95       	swap	r24
 ae6:	88 0f       	add	r24, r24
 ae8:	80 7e       	andi	r24, 0xE0	; 224
 aea:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 aee:	ef ee       	ldi	r30, 0xEF	; 239
 af0:	f0 e0       	ldi	r31, 0x00	; 0
 af2:	80 81       	ld	r24, Z
 af4:	8f 7e       	andi	r24, 0xEF	; 239
 af6:	80 83       	st	Z, r24
 af8:	e6 cf       	rjmp	.-52     	; 0xac6 <__LOCK_REGION_LENGTH__+0x6c6>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 afa:	d8 01       	movw	r26, r16
 afc:	17 96       	adiw	r26, 0x07	; 7
 afe:	ed 91       	ld	r30, X+
 b00:	fc 91       	ld	r31, X
 b02:	18 97       	sbiw	r26, 0x08	; 8
 b04:	e8 0f       	add	r30, r24
 b06:	f1 1d       	adc	r31, r1
 b08:	90 81       	ld	r25, Z
 b0a:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 b0e:	8f 5f       	subi	r24, 0xFF	; 255
 b10:	f8 01       	movw	r30, r16
 b12:	96 81       	ldd	r25, Z+6	; 0x06
 b14:	89 17       	cp	r24, r25
 b16:	88 f3       	brcs	.-30     	; 0xafa <__LOCK_REGION_LENGTH__+0x6fa>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 b18:	8f ef       	ldi	r24, 0xFF	; 255
 b1a:	9f ef       	ldi	r25, 0xFF	; 255
 b1c:	dc 01       	movw	r26, r24
 b1e:	89 83       	std	Y+1, r24	; 0x01
 b20:	9a 83       	std	Y+2, r25	; 0x02
 b22:	ab 83       	std	Y+3, r26	; 0x03
 b24:	bc 83       	std	Y+4, r27	; 0x04
 b26:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 b2a:	9b 81       	ldd	r25, Y+3	; 0x03
 b2c:	8a 81       	ldd	r24, Y+2	; 0x02
 b2e:	99 0f       	add	r25, r25
 b30:	99 0f       	add	r25, r25
 b32:	99 0f       	add	r25, r25
 b34:	82 95       	swap	r24
 b36:	86 95       	lsr	r24
 b38:	87 70       	andi	r24, 0x07	; 7
 b3a:	89 0f       	add	r24, r25
 b3c:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 b40:	9a 81       	ldd	r25, Y+2	; 0x02
 b42:	89 81       	ldd	r24, Y+1	; 0x01
 b44:	99 0f       	add	r25, r25
 b46:	99 0f       	add	r25, r25
 b48:	99 0f       	add	r25, r25
 b4a:	82 95       	swap	r24
 b4c:	86 95       	lsr	r24
 b4e:	87 70       	andi	r24, 0x07	; 7
 b50:	89 0f       	add	r24, r25
 b52:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 b56:	89 81       	ldd	r24, Y+1	; 0x01
 b58:	88 0f       	add	r24, r24
 b5a:	88 0f       	add	r24, r24
 b5c:	88 0f       	add	r24, r24
 b5e:	44 ef       	ldi	r20, 0xF4	; 244
 b60:	50 e0       	ldi	r21, 0x00	; 0
 b62:	da 01       	movw	r26, r20
 b64:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 b66:	ef ee       	ldi	r30, 0xEF	; 239
 b68:	f0 e0       	ldi	r31, 0x00	; 0
 b6a:	90 81       	ld	r25, Z
 b6c:	d8 01       	movw	r26, r16
 b6e:	16 96       	adiw	r26, 0x06	; 6
 b70:	8c 91       	ld	r24, X
 b72:	16 97       	sbiw	r26, 0x06	; 6
 b74:	89 2b       	or	r24, r25
 b76:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 b78:	81 e0       	ldi	r24, 0x01	; 1
 b7a:	1a 96       	adiw	r26, 0x0a	; 10
 b7c:	8c 93       	st	X, r24
 b7e:	da 01       	movw	r26, r20
 b80:	8c 91       	ld	r24, X
 b82:	84 60       	ori	r24, 0x04	; 4
 b84:	8c 93       	st	X, r24
 b86:	20 ef       	ldi	r18, 0xF0	; 240
 b88:	30 e0       	ldi	r19, 0x00	; 0
 b8a:	d9 01       	movw	r26, r18
 b8c:	8c 91       	ld	r24, X
 b8e:	84 60       	ori	r24, 0x04	; 4
 b90:	8c 93       	st	X, r24
          Can_set_rplv();
 b92:	80 81       	ld	r24, Z
 b94:	80 62       	ori	r24, 0x20	; 32
 b96:	80 83       	st	Z, r24
          Can_set_idemsk();
 b98:	da 01       	movw	r26, r20
 b9a:	8c 91       	ld	r24, X
 b9c:	81 60       	ori	r24, 0x01	; 1
 b9e:	8c 93       	st	X, r24
          Can_config_rx();       
 ba0:	80 81       	ld	r24, Z
 ba2:	8f 73       	andi	r24, 0x3F	; 63
 ba4:	80 83       	st	Z, r24
 ba6:	80 81       	ld	r24, Z
 ba8:	80 68       	ori	r24, 0x80	; 128
 baa:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 bac:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 bae:	09 c0       	rjmp	.+18     	; 0xbc2 <__LOCK_REGION_LENGTH__+0x7c2>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
 bb0:	f8 01       	movw	r30, r16
 bb2:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 bb4:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
 bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__LOCK_REGION_LENGTH__+0x7c2>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
 bb8:	8f e1       	ldi	r24, 0x1F	; 31
 bba:	d8 01       	movw	r26, r16
 bbc:	19 96       	adiw	r26, 0x09	; 9
 bbe:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
 bc0:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
 bc2:	0f 90       	pop	r0
 bc4:	0f 90       	pop	r0
 bc6:	0f 90       	pop	r0
 bc8:	0f 90       	pop	r0
 bca:	df 91       	pop	r29
 bcc:	cf 91       	pop	r28
 bce:	1f 91       	pop	r17
 bd0:	0f 91       	pop	r16
 bd2:	08 95       	ret

00000bd4 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
 bd4:	1f 93       	push	r17
 bd6:	cf 93       	push	r28
 bd8:	df 93       	push	r29
 bda:	fc 01       	movw	r30, r24
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
 bdc:	91 85       	ldd	r25, Z+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
 bde:	99 23       	and	r25, r25
 be0:	09 f4       	brne	.+2      	; 0xbe4 <can_get_status+0x10>
 be2:	8a c0       	rjmp	.+276    	; 0xcf8 <can_get_status+0x124>
 be4:	9f 31       	cpi	r25, 0x1F	; 31
 be6:	09 f4       	brne	.+2      	; 0xbea <can_get_status+0x16>
 be8:	89 c0       	rjmp	.+274    	; 0xcfc <can_get_status+0x128>
 bea:	9f 3f       	cpi	r25, 0xFF	; 255
 bec:	09 f4       	brne	.+2      	; 0xbf0 <can_get_status+0x1c>
 bee:	88 c0       	rjmp	.+272    	; 0xd00 <can_get_status+0x12c>
 bf0:	ef 01       	movw	r28, r30
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
 bf2:	80 81       	ld	r24, Z
 bf4:	82 95       	swap	r24
 bf6:	80 7f       	andi	r24, 0xF0	; 240
 bf8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    a_status = can_get_mob_status();
 bfc:	9d da       	rcall	.-2758   	; 0x138 <can_get_mob_status>
 bfe:	18 2f       	mov	r17, r24
    
    switch (a_status)
 c00:	80 32       	cpi	r24, 0x20	; 32
 c02:	59 f0       	breq	.+22     	; 0xc1a <can_get_status+0x46>
 c04:	20 f4       	brcc	.+8      	; 0xc0e <can_get_status+0x3a>
 c06:	88 23       	and	r24, r24
 c08:	09 f4       	brne	.+2      	; 0xc0c <can_get_status+0x38>
 c0a:	7c c0       	rjmp	.+248    	; 0xd04 <can_get_status+0x130>
 c0c:	6b c0       	rjmp	.+214    	; 0xce4 <can_get_status+0x110>
 c0e:	80 34       	cpi	r24, 0x40	; 64
 c10:	09 f4       	brne	.+2      	; 0xc14 <can_get_status+0x40>
 c12:	5e c0       	rjmp	.+188    	; 0xcd0 <can_get_status+0xfc>
 c14:	80 3a       	cpi	r24, 0xA0	; 160
 c16:	09 f0       	breq	.+2      	; 0xc1a <can_get_status+0x46>
 c18:	65 c0       	rjmp	.+202    	; 0xce4 <can_get_status+0x110>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
 c1a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 c1e:	8f 70       	andi	r24, 0x0F	; 15
 c20:	8e 83       	std	Y+6, r24	; 0x06
            can_get_data(cmd->pt_data);
 c22:	8f 81       	ldd	r24, Y+7	; 0x07
 c24:	98 85       	ldd	r25, Y+8	; 0x08
 c26:	9b da       	rcall	.-2762   	; 0x15e <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
 c28:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 c2c:	81 e0       	ldi	r24, 0x01	; 1
 c2e:	92 ff       	sbrs	r25, 2
 c30:	80 e0       	ldi	r24, 0x00	; 0
 c32:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
 c34:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 c38:	84 ff       	sbrs	r24, 4
 c3a:	2d c0       	rjmp	.+90     	; 0xc96 <can_get_status+0xc2>
            {
                cmd->ctrl.ide = 1; // extended frame
 c3c:	81 e0       	ldi	r24, 0x01	; 1
 c3e:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
 c40:	e3 ef       	ldi	r30, 0xF3	; 243
 c42:	f0 e0       	ldi	r31, 0x00	; 0
 c44:	80 81       	ld	r24, Z
 c46:	86 95       	lsr	r24
 c48:	86 95       	lsr	r24
 c4a:	86 95       	lsr	r24
 c4c:	8d 83       	std	Y+5, r24	; 0x05
 c4e:	a2 ef       	ldi	r26, 0xF2	; 242
 c50:	b0 e0       	ldi	r27, 0x00	; 0
 c52:	8c 91       	ld	r24, X
 c54:	90 81       	ld	r25, Z
 c56:	86 95       	lsr	r24
 c58:	86 95       	lsr	r24
 c5a:	86 95       	lsr	r24
 c5c:	20 e2       	ldi	r18, 0x20	; 32
 c5e:	92 9f       	mul	r25, r18
 c60:	80 0d       	add	r24, r0
 c62:	11 24       	eor	r1, r1
 c64:	8c 83       	std	Y+4, r24	; 0x04
 c66:	e1 ef       	ldi	r30, 0xF1	; 241
 c68:	f0 e0       	ldi	r31, 0x00	; 0
 c6a:	80 81       	ld	r24, Z
 c6c:	9c 91       	ld	r25, X
 c6e:	86 95       	lsr	r24
 c70:	86 95       	lsr	r24
 c72:	86 95       	lsr	r24
 c74:	20 e2       	ldi	r18, 0x20	; 32
 c76:	92 9f       	mul	r25, r18
 c78:	80 0d       	add	r24, r0
 c7a:	11 24       	eor	r1, r1
 c7c:	8b 83       	std	Y+3, r24	; 0x03
 c7e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 c82:	90 81       	ld	r25, Z
 c84:	86 95       	lsr	r24
 c86:	86 95       	lsr	r24
 c88:	86 95       	lsr	r24
 c8a:	20 e2       	ldi	r18, 0x20	; 32
 c8c:	92 9f       	mul	r25, r18
 c8e:	80 0d       	add	r24, r0
 c90:	11 24       	eor	r1, r1
 c92:	8a 83       	std	Y+2, r24	; 0x02
 c94:	13 c0       	rjmp	.+38     	; 0xcbc <can_get_status+0xe8>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
 c96:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
 c98:	e3 ef       	ldi	r30, 0xF3	; 243
 c9a:	f0 e0       	ldi	r31, 0x00	; 0
 c9c:	80 81       	ld	r24, Z
 c9e:	82 95       	swap	r24
 ca0:	86 95       	lsr	r24
 ca2:	87 70       	andi	r24, 0x07	; 7
 ca4:	8b 83       	std	Y+3, r24	; 0x03
 ca6:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 caa:	80 81       	ld	r24, Z
 cac:	92 95       	swap	r25
 cae:	96 95       	lsr	r25
 cb0:	97 70       	andi	r25, 0x07	; 7
 cb2:	88 0f       	add	r24, r24
 cb4:	88 0f       	add	r24, r24
 cb6:	88 0f       	add	r24, r24
 cb8:	89 0f       	add	r24, r25
 cba:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
 cbc:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
 cbe:	ef ee       	ldi	r30, 0xEF	; 239
 cc0:	f0 e0       	ldi	r31, 0x00	; 0
 cc2:	80 81       	ld	r24, Z
 cc4:	8f 73       	andi	r24, 0x3F	; 63
 cc6:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 cc8:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
            rtn_val = CAN_STATUS_COMPLETED;
 ccc:	80 e0       	ldi	r24, 0x00	; 0
            break;
 cce:	1b c0       	rjmp	.+54     	; 0xd06 <can_get_status+0x132>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
 cd0:	89 87       	std	Y+9, r24	; 0x09
            Can_mob_abort();        // Freed the MOB
 cd2:	ef ee       	ldi	r30, 0xEF	; 239
 cd4:	f0 e0       	ldi	r31, 0x00	; 0
 cd6:	80 81       	ld	r24, Z
 cd8:	8f 73       	andi	r24, 0x3F	; 63
 cda:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 cdc:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
            rtn_val = CAN_STATUS_COMPLETED;
 ce0:	80 e0       	ldi	r24, 0x00	; 0
            break;
 ce2:	11 c0       	rjmp	.+34     	; 0xd06 <can_get_status+0x132>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
 ce4:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
 ce6:	ef ee       	ldi	r30, 0xEF	; 239
 ce8:	f0 e0       	ldi	r31, 0x00	; 0
 cea:	80 81       	ld	r24, Z
 cec:	8f 73       	andi	r24, 0x3F	; 63
 cee:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 cf0:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
            rtn_val = CAN_STATUS_ERROR;
 cf4:	82 e0       	ldi	r24, 0x02	; 2
            break;
 cf6:	07 c0       	rjmp	.+14     	; 0xd06 <can_get_status+0x132>
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
 cf8:	82 e0       	ldi	r24, 0x02	; 2
 cfa:	05 c0       	rjmp	.+10     	; 0xd06 <can_get_status+0x132>
 cfc:	82 e0       	ldi	r24, 0x02	; 2
 cfe:	03 c0       	rjmp	.+6      	; 0xd06 <can_get_status+0x132>
 d00:	82 e0       	ldi	r24, 0x02	; 2
 d02:	01 c0       	rjmp	.+2      	; 0xd06 <can_get_status+0x132>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
 d04:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
 d06:	df 91       	pop	r29
 d08:	cf 91       	pop	r28
 d0a:	1f 91       	pop	r17
 d0c:	08 95       	ret

00000d0e <main>:
#include <avr/io.h>

#include "can/can_lib.h"

int main(void)
{
 d0e:	cf 93       	push	r28
 d10:	df 93       	push	r29
 d12:	cd b7       	in	r28, 0x3d	; 61
 d14:	de b7       	in	r29, 0x3e	; 62
 d16:	62 97       	sbiw	r28, 0x12	; 18
 d18:	0f b6       	in	r0, 0x3f	; 63
 d1a:	f8 94       	cli
 d1c:	de bf       	out	0x3e, r29	; 62
 d1e:	0f be       	out	0x3f, r0	; 63
 d20:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[] = "Hallo";
 d22:	86 e0       	ldi	r24, 0x06	; 6
 d24:	e0 e0       	ldi	r30, 0x00	; 0
 d26:	f1 e0       	ldi	r31, 0x01	; 1
 d28:	8e 01       	movw	r16, r28
 d2a:	0f 5f       	subi	r16, 0xFF	; 255
 d2c:	1f 4f       	sbci	r17, 0xFF	; 255
 d2e:	d8 01       	movw	r26, r16
 d30:	01 90       	ld	r0, Z+
 d32:	0d 92       	st	X+, r0
 d34:	8a 95       	dec	r24
 d36:	e1 f7       	brne	.-8      	; 0xd30 <main+0x22>
	can_init(0);
 d38:	80 e0       	ldi	r24, 0x00	; 0
 d3a:	33 da       	rcall	.-2970   	; 0x1a2 <can_init>
	
	st_cmd_t canMsg;
	
	canMsg.id.ext = 0x180;
 d3c:	80 e8       	ldi	r24, 0x80	; 128
 d3e:	91 e0       	ldi	r25, 0x01	; 1
 d40:	a0 e0       	ldi	r26, 0x00	; 0
 d42:	b0 e0       	ldi	r27, 0x00	; 0
 d44:	89 87       	std	Y+9, r24	; 0x09
 d46:	9a 87       	std	Y+10, r25	; 0x0a
 d48:	ab 87       	std	Y+11, r26	; 0x0b
 d4a:	bc 87       	std	Y+12, r27	; 0x0c
	canMsg.pt_data = &data[0];
 d4c:	1f 87       	std	Y+15, r17	; 0x0f
 d4e:	0e 87       	std	Y+14, r16	; 0x0e
	canMsg.dlc = 5;
 d50:	85 e0       	ldi	r24, 0x05	; 5
 d52:	8d 87       	std	Y+13, r24	; 0x0d
	canMsg.cmd = CMD_TX_DATA;
 d54:	82 e0       	ldi	r24, 0x02	; 2
 d56:	88 87       	std	Y+8, r24	; 0x08
	
	while(can_cmd(&canMsg) != CAN_CMD_ACCEPTED); // wait for MOb to configure
 d58:	ce 01       	movw	r24, r28
 d5a:	07 96       	adiw	r24, 0x07	; 7
 d5c:	2d da       	rcall	.-2982   	; 0x1b8 <can_cmd>
 d5e:	81 11       	cpse	r24, r1
 d60:	fb cf       	rjmp	.-10     	; 0xd58 <main+0x4a>
	
	while(can_get_status(&canMsg) == CAN_STATUS_NOT_COMPLETED); // wait for a transmit request to come in, and send a response
 d62:	ce 01       	movw	r24, r28
 d64:	07 96       	adiw	r24, 0x07	; 7
 d66:	36 df       	rcall	.-404    	; 0xbd4 <can_get_status>
 d68:	81 30       	cpi	r24, 0x01	; 1
 d6a:	d9 f3       	breq	.-10     	; 0xd62 <main+0x54>
 d6c:	ff cf       	rjmp	.-2      	; 0xd6c <main+0x5e>

00000d6e <__vector_32>:
		actPos++;		
	}
}

ISR(USART1_RX_vect)
{
 d6e:	1f 92       	push	r1
 d70:	0f 92       	push	r0
 d72:	0f b6       	in	r0, 0x3f	; 63
 d74:	0f 92       	push	r0
 d76:	11 24       	eor	r1, r1
 d78:	0b b6       	in	r0, 0x3b	; 59
 d7a:	0f 92       	push	r0
 d7c:	8f 93       	push	r24
 d7e:	9f 93       	push	r25
 d80:	ef 93       	push	r30
 d82:	ff 93       	push	r31
	uint8_t data, tmphead;
	
	data = UDR1; /* read the received data */
 d84:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	/* calculate buffer index */
	tmphead = ( UART_rxHead + 1 ) & UART_RX_BUFFER_MASK;
 d88:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <UART_rxHead>
 d8c:	ef 5f       	subi	r30, 0xFF	; 255
 d8e:	ef 77       	andi	r30, 0x7F	; 127
	UART_rxHead = tmphead; /* store new index */
 d90:	e0 93 07 01 	sts	0x0107, r30	; 0x800107 <UART_rxHead>
	if ( tmphead == UART_rxTail )
 d94:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__data_end>
	{
		/* ERROR! Receive buffer overflow */
	}

	UART_RX_BUFFER[tmphead] = data; /* store received data in buffer */
 d98:	f0 e0       	ldi	r31, 0x00	; 0
 d9a:	e8 57       	subi	r30, 0x78	; 120
 d9c:	fe 4f       	sbci	r31, 0xFE	; 254
 d9e:	80 83       	st	Z, r24
}
 da0:	ff 91       	pop	r31
 da2:	ef 91       	pop	r30
 da4:	9f 91       	pop	r25
 da6:	8f 91       	pop	r24
 da8:	0f 90       	pop	r0
 daa:	0b be       	out	0x3b, r0	; 59
 dac:	0f 90       	pop	r0
 dae:	0f be       	out	0x3f, r0	; 63
 db0:	0f 90       	pop	r0
 db2:	1f 90       	pop	r1
 db4:	18 95       	reti

00000db6 <__tablejump2__>:
 db6:	ee 0f       	add	r30, r30
 db8:	ff 1f       	adc	r31, r31
 dba:	00 24       	eor	r0, r0
 dbc:	00 1c       	adc	r0, r0
 dbe:	0b be       	out	0x3b, r0	; 59
 dc0:	07 90       	elpm	r0, Z+
 dc2:	f6 91       	elpm	r31, Z
 dc4:	e0 2d       	mov	r30, r0
 dc6:	09 94       	ijmp

00000dc8 <_exit>:
 dc8:	f8 94       	cli

00000dca <__stop_program>:
 dca:	ff cf       	rjmp	.-2      	; 0xdca <__stop_program>

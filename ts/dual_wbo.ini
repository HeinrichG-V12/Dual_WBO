[MegaTune]
	signature      = "Speeduino Dual EGO Controller" ; Can expander sends a null at 20th byte.

[TunerStudio]
	queryCommand   = "Q"  ; Verify against signature
	versionInfo    = "S"  ; firmwave version for title bar.
	signature      = "Speeduino Dual EGO Controller" ; Can expander sends a null at 20th byte.

	; TS will try to use legacy temp units in some cases, showing "deg F" on a CLT gauge that's actually deg C
	useLegacyFTempUnits = false

[Constants]

;----------------------------------------------------------------------------
; Constants Definition
; --------------------
;
; Scalar Values
; -------------
; The scaling and translation values are used as follows:
;    msValue   = userValue / scale - translate
;    userValue = (msValue + translate) * scale
;
;
; Temperatures are fine, check out the Fielding IAC example (fastIdleT).
;
; Array Values
; ------------
; Arrays are specified just like scalars, except that they have a "shape"
; entry in the fourth parameter.  The shape allows you to define lists or
; tables, for example [8] defines a list with eight values and [2x4] defines
; a table with eight values (two rows and four columns).  Tables may be
; stored in either "X-" or "Y-order."  X-order means that memory is laid
; out like.
;
;     [x1,y1] [x2,y1]...[xn,y1] [x1,y2]...
;
; Y-order would be
;
;     [x1,y1] [x1,y2]...[x1,yn] [x2,y1]...
;
; To use the TableEditor, you must define two lists and a table, and
; the lengths of the lists must correspond to the shape of the table.
;
; Bit Fields
; ----------
; Bits are numbered 0-7, the rightmost being bit zero.  The basic
; data word that stores bit fields must be unsigned.
;
; You need NOT supply the correct number of labels matching the
; number of bits you've specified (one bit requires 2 values, two
; bits requires 4 values and so on).  If you neglect to supply enough
; labels, they will be synthesised using the sequence "1", "2" and so
; on based upon their position in the sequence (the cltType and matType
; will end up with identical lists).
;
; If you specify a label as "INVALID" (all upper case), then it will
; not be displayed in the combo box, so you can leave out values that
; make no sense.
;
;----------------------------------------------------------------------------

;   C Type                 Bits            Range                    TunerStudio INI Designation
;   ------                 ----            -----                    ---------------------------
; - char (=signed char)     8              -128 to 127               S08 (one byte offset each)
; - unsigned char           8                 0 to 255               U08
; ...............................................................................................
; - int  (=signed int)     16          -32768 to 32767               S16 (two byte offset each)
;   (= short)
; - unsigned int           16               0 to 65535               U16
;   (=unsigned short int)
; ................................................................................................
; - long  (=signed long)   32          -2³¹ to 2³¹ - 1               S32 (four byte offset each)
;   (=long int)     
; - unsigned long          32             0 to 2³² - 1               U32
;   (=unsigned long int)
; ................................................................................................
; Note that variables are signed unless designated otherwise.

	endianness				= little
	nPages					= 2
	pageSize				= 9, 96

	burnCommand				= "B"
	pageActivate        	= "P\001", "P\002"
	pageReadCommand			= "V"
	pageValueWrite			= "W%o%v"
 
	blockReadTimeout		= 2000		;Milliseconds total timeout for reading page.
	pageActivationDelay		= 10		;Milliseconds delay after burn command.
	tsWriteBlocks			= off
	interWriteDelay			= 10
	blockingFactor			= 2048
	tableBlockingFactor		= 2048
	delayAfterPortOpen		= 1000

 ;Page 1 is main settings
page = 1
	;  name       = bits,   type,    offset, bits
	;  name       = array,  type,    offset, shape, units,     scale, translate,    lo,      hi, digits
	;  name       = scalar, type,    offset,        units,     scale, translate,    lo,      hi, digits
	
	isCANEnabled				= bits, U08, 0, [0:0], "false", "true"
	canSpeed					= bits, U08, 0, [1:2], "125kbit", "250kbit", "500kbit", "1mbit"
	interfaceActivation			= bits, U08, 0, [3:3], "Input", "CAN"
	isCANDebugEnabled			= bits, U08, 0, [4:4], "false", "true"
	use29bitIdentifier			= bits, U08, 0, [5:5], "false", "true"
	amplificationFactor			= bits, U08, 0, [6:6], "8", "17"
	unused1						= bits, U08, 0, [7:7], "0", "1"
	
	isChannel1Enabled 			= bits, U08, 1, [0:0], "false", "true"
	isChannel2Enabled 			= bits, U08, 1, [1:1], "false", "true"
	channel1OutputMode			= bits, U08, 1, [2:3], "Analog", "CAN", "Analog & CAN", INVALID
	channel2OutputMode			= bits, U08, 1, [4:5], "Analog", "CAN", "Analog & CAN", INVALID
	channel1AnalogOutputMode	= bits, U08, 1, [6:6], "Wideband", "Narrowband emulation"
	channel2AnalogOutputMode	= bits, U08, 1, [7:7], "Wideband", "Narrowband emulation"

	stoich_ratio				= scalar, U08, 2, ":1", 0.1, 0.0, 0.0, 25.5, 1

	channel1CANid				= scalar, U16, 3, "DEC", 1.000, 0.000
	channel2CANid				= scalar, U16, 5, "DEC", 1.000, 0.000
	debugMessageID				= scalar, U16, 7, "DEC", 1.000, 0.000

; values for ip to lamba editor
page = 2
	IP_values					= array, S16,	0,	[ 24], "mA", 0.001,	0.0, -2000, 2250,	3
	Lambda_values				= array, U16,	48, [ 24], "", 0.001,	0.0, 0,		11000,	3

[ConstantsExtensions]
	defaultValue = stoich_ratio, 14.7
	defaultValue = channel1CANid, 384
	defaultValue = channel2CANid, 385
	defaultValue = debugMessageID, 400
	requiresPowerCycle = isCANEnabled
	requiresPowerCycle = canSpeed
	requiresPowerCycle = interfaceActivation
	requiresPowerCycle = use29bitIdentifier
	requiresPowerCycle = isChannel1Enabled
	requiresPowerCycle = isChannel2Enabled
	requiresPowerCycle = channel1OutputMode
	requiresPowerCycle = channel2OutputMode
	requiresPowerCycle = channel1AnalogOutputMode
	requiresPowerCycle = channel2AnalogOutputMode
	requiresPowerCycle = stoich_ratio
	requiresPowerCycle = channel1CANid
	requiresPowerCycle = channel2CANid
	requiresPowerCycle = debugMessageID

[Menu]
;----------------------------------------------------------------------------
;  There are five pre-defined values that may be used to define your menus.
;  The first four allow access to the "standard" dialog boxes, the last one
;  merely draws a separator (horizontal line) in the menu.
;
;     std_constants
;     std_enrichments
;     std_realtime
;     std_warmup
;
;     std_separator
;
;  If you use any of the std_constants, std_enrichments or std_warmup
;  editors, they may be optionally suffixed with a page number (only
;  useful for multi-page code variants), which causes them to edit the
;  specified page.  If you leave off the page specifier, they edit logical
;  page one as specified in the Constants section.
;
;  There are four special menu names, which when used append to the standard
;  menus of the same name instead of creating a new one.  The menu names
;  are "File", "Communications", "Tools" and "Help".
;
;----------------------------------------------------------------------------

menuDialog = main
	menu = "Settings"
		subMenu = interface_config,      "Interface Configuration"
		subMenu = lambda_curve_config, 	"Ip to Lambda Curve Configuration"
	  
[UserDefined]
; Enhanced TunerStudio dialogs can be defined here
; MegaTune will over look this section
; These dialogs will over-ride those in the UserDefined Section
; User defined ar loaded first, then if one by the same name is defined here,
; it will replace the MegaTune definition

; dialog = name,   Title, Layout
;
; valid options for layout are xAxis, yAxis, border
; for an xAxis, each field added will be added from right to left
; A yAxis layout will add fields from top to bottom
; A border layout will expect an additional constraint to determine placement
; valid border constraints are north, South, East, West, Center
; all 5 do not need to be filled.

; The field name can be either a constant reference, or a reference to another
; dialog which will be added.

	dialog = interfaceConfigNorth, "CAN Configuration"
		field = "CAN enabled", isCANEnabled
		field = "Use 29-bit identifier", use29bitIdentifier, {isCANEnabled}
		field = "CAN speed", canSpeed, {isCANEnabled}
		field = "CAN debug messages", isCANDebugEnabled, {isCANEnabled}
		field = "CAN debug message id", debugMessageID, {isCANEnabled && isCANDebugEnabled}
		field = ""
		field = "Channel 1 CAN ID", channel1CANid, {isCANEnabled && isChannel1Enabled && (channel1OutputMode == 1 || channel1OutputMode == 2)}
		field = "Channel 2 CAN ID", channel2CANid, {isCANEnabled && isChannel2Enabled && (channel2OutputMode == 1 || channel2OutputMode == 2)}

	dialog = interfaceConfigCenter, "Interface Configuration"
		field = "Interface activation over: ", interfaceActivation
		field = "Stoichiometric ratio", stoich_ratio
		field = "Amplification factor", amplificationFactor
		field = ""
		field = "Channel 1 enabled", isChannel1Enabled
		field = "Channel 1 output mode", channel1OutputMode, {isChannel1Enabled}
		field = "Channel 1 analog output mode", channel1AnalogOutputMode, {isChannel1Enabled && channel1OutputMode != 1}
		field = ""
		field = "Channel 2 enabled", isChannel2Enabled
		field = "Channel 2 output mode", channel2OutputMode, {isChannel2Enabled}
		field = "Channel 2 analog output mode", channel2AnalogOutputMode, {isChannel2Enabled && channel2OutputMode != 1}
		
	dialog = interfaceConfigSouth, "Test"
		commandButton = "Test debug message", cmdDebugMsg_test, {isCANEnabled && isCANDebugEnabled}	
		commandButton = "Test channel 1", cmdCanChannel1_test, {isCANEnabled && isChannel1Enabled && (channel1OutputMode == 1 || channel1OutputMode == 2)}
		commandButton = "Test channel 2", cmdCanChannel2_test, {isCANEnabled && isChannel2Enabled && (channel2OutputMode == 1 || channel2OutputMode == 2)}

    dialog = interface_config, "", yAxis
		topicHelp = "https://github.com/HeinrichG-V12/Dual_WBO/wiki"
		panel = interfaceConfigNorth, North
		panel = interfaceConfigCenter, Center
		panel = interfaceConfigSouth, South

	dialog = lambda_curve_config, "Ip[mA] to lambda curve"
		panel = ip_to_lambda_curve

[SettingContextHelp]
	isCANEnabled = "Enable CAN bus on controller"
	use29bitIdentifier = "Use 29-bit identifier instead of 11-bit, i.e. 0x180x"
	canSpeed = "Select CAN speed, 125kbit, 250kbit, 500kbit or 1mbit"
	interfaceActivation = "How should this interface beening activated? Via input pin or via CAN. \n If CAN is selected, the option CAN enabled has to be actived"
	isCANDebugEnabled = "Send some low level debug messages"
	debugMessageID = "Set CAN id (decimal value!) for debug messages"
	channel1CANid = "CAN id (decimal value!) for channel 1"
	channel2CANid = "CAN id (decimal value!) for channel 2"
	stoich_ratio = "The stoichiometric ratio of the fuel being used."
	amplificationFactor = "Amplification factor v=17 is typically used for lean applications (lambda > 1), amplification factor v=8 is typically used for rich applications (lambda < 1 )."
	isChannel1Enabled = "Enable channel 1"
	channel1OutputMode = "Output mode for channel 1. Possible values are:\n 1. analog output \n 2. CAN \n 3. Analog and CAN"
	channel1AnalogOutputMode = "If output mode analog or can & analog is selected, select output mode for it:\n 1. wideband \n2. narrowband"
	isChannel2Enabled = "Enable channel 2"
	channel2OutputMode = "Output mode for channel 2. Possible values are:\n 1. analog output \n 2. CAN \n 3. Analog and CAN"
	channel2AnalogOutputMode = "If output mode analog or can & analog is selected, select output mode for it:\n 1. wideband \n2. narrowband"

	cmdDebugMsg_test = "Sends an example debug message over CAN"
	cmdCanChannel1_test = "Sends an example message over CAN with channel 1 CAN id"
	cmdCanChannel2_test = "Sends an example message over CAN with channel 2 CAN id"

[ControllerCommands]
; commandName    = command1, command2, commandn...
; command in standard ini format, a command name can be assigned to 1 to n commands that will be executed in order.
;         This does not include any resultant protocol envelope data, only the response data itself.

; WARNING!! These commands bypass TunerStudio's normal memory synchronization. If these commands
; alter mapped settings (Constant) memory in the controller, TunerStudio will have an out of sync condition
; and may create error messages.
; It is expected that these commands would not typically alter any ram mapped to a Constant.

cmdDebugMsg_test = "E\x01\x00"
cmdCanChannel1_test = "E\x01\x01"
cmdCanChannel2_test = "E\x01\x02"

[CurveEditor]
	;tps-based accel enrichment
	curve = ip_to_lambda_curve, "Ip[mA] to lambda curve"
		columnLabel = "Ip[mA]", "Lambda"
		xAxis = -2.2, 2.3, 24
		yAxis = 0.6, 11, 24
		xBins = IP_values
		yBins = Lambda_values

[OutputChannels]
	deadValue		= { 0 } ; Convenient unchanging value.
	ochGetCommand	= "A"
	ochBlockSize	= 28

	secl				= scalar, U08, 0, "sec", 1.000, 0.000
	VBatt 				= scalar, U08, 1, "V", 0.100, 0.000
	lambdaValue_1		= scalar, U08, 2, "", 0.010, 0.000
	lambdaValue_2		= scalar, U08, 3, "", 0.010, 0.000
	PWM_Sensor_1_raw	= scalar, U16, 4, "raw", 1.000, 0.000
	PWM_Sensor_2_raw	= scalar, U16, 6, "raw", 1.000, 0.000
	Ua_Cal_Sensor_1		= scalar, U16, 8, "raw", 1.000, 0.000
	Ua_Sensor_1			= scalar, U16, 10, "raw", 1.000, 0.000
	Ur_Cal_Sensor_1		= scalar, U16, 12, "raw", 1.000, 0.000
	Ur_Sensor_1			= scalar, U16, 14, "raw", 1.000, 0.000
	Ip_Sensor_1			= scalar, S16, 16, "raw", 0.001, 0.000
	Ua_Cal_Sensor_2		= scalar, U16, 18, "raw", 1.000, 0.000
	Ua_Sensor_2			= scalar, U16, 20, "raw", 1.000, 0.000
	Ur_Cal_Sensor_2		= scalar, U16, 22, "raw", 1.000, 0.000
	Ur_Sensor_2			= scalar, U16, 24, "raw", 1.000, 0.000
	Ip_Sensor_2			= scalar, S16, 26, "raw", 0.001, 0.000

	PWM_Sensor1 		= { (PWM_Sensor_1_raw / 1024.0) * 100.0 }
	PWM_Sensor2 		= { (PWM_Sensor_2_raw / 1024.0) * 100.0 }
	AFRValue_1			= { lambdaValue_1 * stoich_ratio}
	AFRValue_2			= { lambdaValue_2 * stoich_ratio}
	seconds          	= { secl }

[GaugeConfigurations]
;-------------------------------------------------------------------------------
;  Notes on some of the gauges.
;-------------------------------------------------------------------------------
; Define a gauge's characteristics here, then go to a specific layout
; block (Tuning or FrontPage) and use the name you've defined here to
; display that gauge in a particular position.
;
; Name  = Case-sensitive, user-defined name for this gauge configuration.
; Var   = Case-sensitive name of variable to be displayed, see the
;         OutputChannels block in this file for possible values.
; Title = Title displayed at the top of the gauge.
; Units = Units displayed below value on gauge.
; Lo    = Lower scale limit of gauge.
; Hi    = Upper scale limit of gauge.
; LoD   = Lower limit at which danger color is used for gauge background.
; LoW   = Lower limit at which warning color is used.
; HiW   = Upper limit at which warning color is used.
; HiD   = Upper limit at which danger color is used.
; vd    = Decimal places in displayed value
; ld    = Label decimal places for display of Lo and Hi, above.

;  Name                 Var             Title                   Units     Lo     Hi     LoD    LoW   HiW   HiD vd ld
gaugeCategory = "Sensor Inputs"
	G_VBatt			= VBatt,		"Battery",				"V",       8,     21,       9,     10,      17,    19,   1,   1

	G_afr1			= AFRValue_1,	"Air:Fuel Ratio 1",     "",       10,   19.4,      12,     13,      15,    16,   2,   2
	G_afr2			= AFRValue_2,	"Air:Fuel Ratio 2",     "",       10,   19.4,      12,     13,      15,    16,   2,   2

	G_lambda1       = lambdaValue_1, "Lambda 1",       		"",        0.5,  1.5,    0.5,   0.7,    2,  1.1, 2, 2
	G_lambda2       = lambdaValue_2, "Lambda 2",       		"",        0.5,  1.5,    0.5,   0.7,    2,  1.1, 2, 2

	G_PWM_Sensor1	= PWM_Sensor1,	"PWM 1 Duty Cycle",		"%",	  0,   100,     -1,    -1,   70,   80, 1, 1
	G_PWM_Sensor2	= PWM_Sensor2,	"PWM 2 Duty Cycle",		"%",	  0,   100,     -1,    -1,   70,   80, 1, 1
	G_Clock			= secl,          	"Clock",              	"Seconds",  0,   255,     10,    10,  245,  245, 0, 0

gaugeCategory = "Sensor Heater"
	G_Ur_Cal_Sensor_1_raw 	= Ur_Cal_Sensor_1, 	"Ur_Cal_Sensor_1", 	"raw", 0, 1024, -1, -1, -1, -1, 1, 1
	G_Ur_Cal_Sensor_2_raw 	= Ur_Cal_Sensor_2, 	"Ur_Cal_Sensor_2", 	"raw", 0, 1024, -1, -1, -1, -1, 1, 1
	G_Ur_Sensor_1_raw 		= Ur_Sensor_1, 		"Ur_Sensor_1", 		"raw", 0, 1024, -1, -1, -1, -1, 1, 1
	G_Ur_Sensor_2_raw 		= Ur_Sensor_2, 		"Ur_Sensor_2", 		"raw", 0, 1024, -1, -1, -1, -1, 1, 1

[FrontPage]
; Gauges are numbered left to right, top to bottom.
;
;    1  2  3  4
;    5  6  7  8
	gauge1 = G_VBatt
	gauge2 = G_afr1
	gauge3 = G_afr2
	gauge4 = G_lambda1
	gauge5 = G_lambda2
	gauge6 = G_PWM_Sensor1
	gauge7 = G_PWM_Sensor2
	gauge8 = G_Clock

;----------------------------------------------------------------------------
; Indicators
;             expr                   off-label       on-label,       off-bg, off-fg, on-bg,  on-fg
;   indicator = { BRAKE            }, "Not Braking",   "Braking",       white, black, green,    black